/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.lopez.julz;

import db.BillsDao;
import db.DatabaseConnection;
import db.OCLMonthlyDao;
import db.ServiceAccountsDao;
import helpers.ConfigFileHelpers;
import helpers.Notifiers;
import helpers.ObjectHelpers;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import pojos.Collectibles;
import pojos.Ledger;
import pojos.OCLMonthly;
import pojos.Server;
import pojos.ServiceAccounts;
import sun.swing.table.DefaultTableCellHeaderRenderer;

/**
 *
 * @author julza
 */
public class AccountBrowser extends javax.swing.JPanel {

    /**
     * Creates new form URLPanel
     */        
    public DatabaseConnection db;
    public Connection connection;
    public Server server;
    
    public String accountId;
    public ServiceAccounts activeAccount;
    
    public List<Ledger> ledgers;
    public List<Collectibles> termedPayments;
    public List<OCLMonthly> termedPaymentAmmortizations;
    
    public AccountBrowser(String accountId) {
        initComponents();
        
        server = ConfigFileHelpers.getServer();
        db = new DatabaseConnection();
        connection = db.getDbConnectionFromDatabase(server);
        
        this.accountId = accountId;
        ledgers = new ArrayList<>();
        termedPaymentAmmortizations = new ArrayList<>();
        
        getAccountInfo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        accountName = new javax.swing.JLabel();
        accountNumber = new javax.swing.JLabel();
        accountAddress = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        accountDetailsTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        balance = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        surcharges = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        totalBalance = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ledgerTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        termedPaymentProfiles = new javax.swing.JList<>();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane4 = new javax.swing.JScrollPane();
        ammortizationTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();

        accountName.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        accountName.setText("Account Name");

        accountNumber.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        accountNumber.setText("Account Number");

        accountAddress.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        accountAddress.setText("Account Address");

        jTabbedPane1.setForeground(new java.awt.Color(102, 102, 102));
        jTabbedPane1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N

        accountDetailsTable.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        accountDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        accountDetailsTable.setRowHeight(30);
        jScrollPane1.setViewportView(accountDetailsTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1156, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 649, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Account Details", jPanel1);

        jPanel4.setLayout(new java.awt.GridLayout(1, 3, 20, 10));

        jPanel6.setPreferredSize(new java.awt.Dimension(1156, 100));

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Balance");

        balance.setFont(new java.awt.Font("Arial", 1, 28)); // NOI18N
        balance.setForeground(new java.awt.Color(0, 102, 204));
        balance.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        balance.setText("0.0");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                    .addComponent(balance, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(balance)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jPanel4.add(jPanel6);

        jPanel5.setPreferredSize(new java.awt.Dimension(1156, 100));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Surcharges");

        surcharges.setFont(new java.awt.Font("Arial", 1, 28)); // NOI18N
        surcharges.setForeground(new java.awt.Color(0, 153, 153));
        surcharges.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        surcharges.setText("0.0");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                    .addComponent(surcharges, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(surcharges)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jPanel4.add(jPanel5);

        jPanel7.setPreferredSize(new java.awt.Dimension(1156, 100));

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Total Balance");

        totalBalance.setFont(new java.awt.Font("Arial", 1, 28)); // NOI18N
        totalBalance.setForeground(new java.awt.Color(255, 51, 51));
        totalBalance.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalBalance.setText("0.0");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                    .addComponent(totalBalance, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(totalBalance)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jPanel4.add(jPanel7);

        ledgerTable.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        ledgerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        ledgerTable.setRowHeight(30);
        jScrollPane2.setViewportView(ledgerTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1156, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Ledger", jPanel2);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("Termed Payment Profiles");

        termedPaymentProfiles.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jScrollPane3.setViewportView(termedPaymentProfiles);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        ammortizationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        ammortizationTable.setRowHeight(30);
        jScrollPane4.setViewportView(ammortizationTable);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setText("Ammortization Table");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 833, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Termed Payments", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(accountName)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(accountAddress)
                                    .addComponent(accountNumber))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(accountName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(accountNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(accountAddress)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addGap(16, 16, 16))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accountAddress;
    private javax.swing.JTable accountDetailsTable;
    private javax.swing.JLabel accountName;
    private javax.swing.JLabel accountNumber;
    private javax.swing.JTable ammortizationTable;
    private javax.swing.JLabel balance;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable ledgerTable;
    private javax.swing.JLabel surcharges;
    private javax.swing.JList<String> termedPaymentProfiles;
    private javax.swing.JLabel totalBalance;
    // End of variables declaration//GEN-END:variables

    public void getAccountInfo() {
        try {
            activeAccount = ServiceAccountsDao.getOneById(connection, accountId);
            
            accountName.setText(activeAccount.getServiceAccountName());
            accountNumber.setText(activeAccount.getOldAccountNo());
            accountAddress.setText(ServiceAccountsDao.getAddress(activeAccount));
            
            String headers[] = { "", "Account Information" };
            DefaultTableModel accountModel = new DefaultTableModel(headers, 16) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
            
            accountModel.setValueAt("Account Status", 0, 0);
            accountModel.setValueAt(activeAccount.getAccountStatus(), 0, 1);
            accountModel.setValueAt("Consumer Type", 1, 0);
            accountModel.setValueAt(activeAccount.getAccountType(), 1, 1);
            accountModel.setValueAt("Contact Numbers", 2, 0);
            accountModel.setValueAt(activeAccount.getContactNumber(), 2, 1);
            accountModel.setValueAt("Email Address", 3, 0);
            accountModel.setValueAt(activeAccount.getEmailAddress(), 3, 1);
            accountModel.setValueAt("Connection Date", 4, 0);
            accountModel.setValueAt(ObjectHelpers.formatReadableDate(activeAccount.getConnectionDate()), 4, 1);
            accountModel.setValueAt("Zone", 5, 0);
            accountModel.setValueAt(activeAccount.getZone(), 5, 1);
            accountModel.setValueAt("Block", 6, 0);
            accountModel.setValueAt(activeAccount.getBlockCode(), 6, 1);
            accountModel.setValueAt("Sequence Code", 7, 0);
            accountModel.setValueAt(activeAccount.getSequenceCode(), 7, 1);
            accountModel.setValueAt("Meter Reader", 8, 0);
            accountModel.setValueAt(activeAccount.getMeterReader(), 8, 1);
            accountModel.setValueAt("Reading Day", 9, 0);
            accountModel.setValueAt(activeAccount.getGroupCode(), 9, 1);
            accountModel.setValueAt("Senior Citizen", 10, 0);
            accountModel.setValueAt(activeAccount.getSeniorCitizen(), 10, 1);
            accountModel.setValueAt("Lifeliner", 11, 0);
            accountModel.setValueAt(activeAccount.getLifeliner(), 11, 1);
            accountModel.setValueAt("Contestable", 12, 0);
            accountModel.setValueAt(activeAccount.getContestable(), 12, 1);
            accountModel.setValueAt("Net Metered", 13, 0);
            accountModel.setValueAt(activeAccount.getNetMetered(), 13, 1);
            accountModel.setValueAt("Coop Consumption", 14, 0);
            accountModel.setValueAt(activeAccount.getItem1(), 14, 1);
            accountModel.setValueAt("Multiplier", 15, 0);
            accountModel.setValueAt(activeAccount.getMultiplier(), 15, 1);
            
            accountDetailsTable.setModel(accountModel);
            
            accountDetailsTable.setDefaultRenderer(Object.class, new DefaultTableCellHeaderRenderer(){
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
//                    super.getTableCellRendererComponent(table, value, hasFocus, hasFocus, row, row);
                    
                    if (column == 0) {
                        setForeground(Color.decode("#656565"));
                        setFont(new Font("Arial", Font.PLAIN, 14));
                    } else if (column == 1) {
                        setForeground(Color.decode("#010101"));
                        setFont(new Font("Arial", Font.BOLD, 14));
                    } 
                    setHorizontalAlignment(JLabel.LEADING);
                    setBackground(Color.WHITE);
                    setValue(value);
                    return this;
                }
            });
            
            accountDetailsTable.getColumnModel().getColumn(0).setMaxWidth(240);
            accountDetailsTable.getColumnModel().getColumn(0).setMinWidth(230);
            
            getLedger();
            getTermedPayments();
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error getting account info", e.getMessage());
        }
    }
    
    public void getLedger() {
        try {
            ledgers.addAll(BillsDao.getLedger(connection, accountId));
            
            String columnNames[] = { "Bill No.", "Billing Month", "Prev. Reading", "Pres. Reading", "Kwh Used", "Bill Amount", "Paid Amount", "Balance" };
            
            DefaultTableModel model = new DefaultTableModel(columnNames, ledgers.size()) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
            
            double surchargeTotal = 0;
            double balanceTotal = 0;
            
            for (int i=0; i<ledgers.size(); i++) {
                Ledger ledger = ledgers.get(i);
                model.setValueAt(ledger.getBillNumber(), i, 0);
                model.setValueAt(ObjectHelpers.formatReadableDate(ledger.getBillingMonth()), i, 1);
                model.setValueAt(ObjectHelpers.roundTwo(ObjectHelpers.doubleStringNull(ledger.getPreviousReading()) + ""), i, 2);
                model.setValueAt(ObjectHelpers.roundTwo(ObjectHelpers.doubleStringNull(ledger.getPresentReading()) + ""), i, 3);
                model.setValueAt(ObjectHelpers.roundTwo(ObjectHelpers.doubleStringNull(ledger.getKwhUsed()) + ""), i, 4);
                model.setValueAt(ObjectHelpers.roundTwo(ObjectHelpers.doubleStringNull(ledger.getNetAmount()) + ""), i, 5);
                model.setValueAt(ObjectHelpers.roundTwo(ObjectHelpers.doubleStringNull(ledger.getPaidAmount()) + ""), i, 6);
                model.setValueAt(ObjectHelpers.roundTwo(ObjectHelpers.doubleStringNull(ledger.getBalance()) + ""), i, 7);
                
                surchargeTotal += BillsDao.getSurchargeFromRaw(ledger.getDueDate(), ObjectHelpers.doubleStringNull(ledger.getBalance()));
                balanceTotal += ObjectHelpers.doubleStringNull(ledger.getBalance());
            }
            
            surcharges.setText(ObjectHelpers.roundTwo(surchargeTotal + ""));
            balance.setText(ObjectHelpers.roundTwo(balanceTotal + ""));
            totalBalance.setText(ObjectHelpers.roundTwo((balanceTotal + surchargeTotal) + ""));
            
            ledgerTable.setModel(model);
            
            ledgerTable.setDefaultRenderer(Object.class, new DefaultTableCellHeaderRenderer(){
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                    Ledger ledger = ledgers.get(row);
                    if (ledger.getPaidAmount()  !=  null && ObjectHelpers.doubleStringNull(ledger.getPaidAmount()) > 0) {
                        setBackground(Color.decode("#FFFFFF"));
                        setForeground(Color.BLACK);
                    } else {
                        setBackground(Color.decode("#de665d"));
                        setForeground(Color.WHITE);
                    }
                    
                    setValue(value);
                    return this;
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error getting ledger information", e.getMessage());
        }
    }
    
    public void getTermedPayments() {
        try {
            termedPayments = BillsDao.getTermedPaymentProfiles(connection, accountId);
            
            String listData[] = new String[termedPayments.size()];
            for(int i=0; i<termedPayments.size(); i++) {
                listData[i] = termedPayments.get(i).getNotes();
            }
            
            termedPaymentProfiles.setListData(listData);
            termedPaymentProfiles.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    if (e.getClickCount() == 1) {
                        termedPaymentAmmortizations.clear();
                        ammortizationTable.setModel(new DefaultTableModel());
                        
                        termedPaymentAmmortizations.addAll(OCLMonthlyDao.getOclListById(connection, termedPayments.get(termedPaymentProfiles.getSelectedIndex()).getId()));
                        
                        String colNames[] = { "Billing Month", "Amount" };
                        DefaultTableModel model = new DefaultTableModel(colNames, termedPaymentAmmortizations.size()) {
                            @Override
                            public boolean isCellEditable(int row, int column) {
                                return false;
                            }
                        };
                        
                        for (int i=0; i<termedPaymentAmmortizations.size(); i++) {
                            model.setValueAt(ObjectHelpers.formatReadableDate(termedPaymentAmmortizations.get(i).getServicePeriod()), i, 0);
                            model.setValueAt(ObjectHelpers.roundTwo(termedPaymentAmmortizations.get(i).getAmount()), i, 1);
                        }
                        
                        ammortizationTable.setModel(model);
                    }
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error getting termed payments", e.getMessage());
        }
    }
}
