/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.lopez.julz;

import db.DCRSummaryTransactionsDao;
import db.DatabaseConnection;
import db.PaidBillsDao;
import db.TransactionIndexDao;
import helpers.ConfigFileHelpers;
import helpers.Notifiers;
import helpers.ObjectHelpers;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.net.URI;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import pojos.PaidBills;
import pojos.Server;
import pojos.TransactionDetails;
import pojos.TransactionIndex;

/**
 *
 * @author Julio Lopez
 */
public class ORCancellationPanel extends javax.swing.JPanel {
    public pojos.Login login;
    
    public Server server;
    public String office;
    
    public DatabaseConnection db;
    public Connection connection;
    
    public List<TransactionDetails> orsList;
    public DefaultTableModel orModel;
    public Object[] orColNames = { "OR Number", "Account Number", "Consumer Name", "Amount Paid", "Source", "ORDate", "Payment Used" };

    /**
     * Creates new form ORCancellationPanel
     */
    public ORCancellationPanel(pojos.Login login) {
        this.login = login;
        initComponents();
        
        server = ConfigFileHelpers.getServer();
        office = ConfigFileHelpers.getOffice();
    
        db = new DatabaseConnection();
        connection = db.getDbConnectionFromDatabase(server);
        
        orsList = new ArrayList<>();
        
        performSearch("All");
        
        addTableCancelCheckCancelPopupMenu(searchORTable);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        orNumberSearch = new javax.swing.JTextField();
        searchOrButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchORTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/cancel_FILL1_wght400_GRAD0_opsz20.png"))); // NOI18N
        jLabel1.setText("OR Cancellation Console");
        jLabel1.setIconTextGap(10);

        jLabel2.setFont(new java.awt.Font("Arial", 2, 12)); // NOI18N
        jLabel2.setText("Search OR Number");

        orNumberSearch.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        orNumberSearch.setForeground(new java.awt.Color(255, 0, 51));
        orNumberSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                orNumberSearchKeyReleased(evt);
            }
        });

        searchOrButton.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        searchOrButton.setText("Seach");
        searchOrButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchOrButtonActionPerformed(evt);
            }
        });

        searchORTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        searchORTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        searchORTable.setRowHeight(28);
        jScrollPane1.setViewportView(searchORTable);

        jLabel3.setFont(new java.awt.Font("Arial", 2, 12)); // NOI18N
        jLabel3.setText("Right click table to cancel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 992, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(orNumberSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchOrButton)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel3)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(orNumberSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchOrButton, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 674, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchOrButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchOrButtonActionPerformed
        if (orNumberSearch.getText() != null) {
            performSearch(orNumberSearch.getText());
        } else {
            performSearch("All");
        }
    }//GEN-LAST:event_searchOrButtonActionPerformed

    private void orNumberSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_orNumberSearchKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (orNumberSearch.getText() != null) {
                performSearch(orNumberSearch.getText());
            } else {
                performSearch("All");
            }
        } else {
            if (orNumberSearch.getText().length() > 2) {
                performSearch(orNumberSearch.getText());
            }
        }            
    }//GEN-LAST:event_orNumberSearchKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField orNumberSearch;
    private javax.swing.JTable searchORTable;
    private javax.swing.JButton searchOrButton;
    // End of variables declaration//GEN-END:variables

    public void performSearch(String or) {
        try {
            orNumberSearch.requestFocus();
            
            orsList.clear();
            
            orsList.addAll(DCRSummaryTransactionsDao.searchOR(connection,or));
            int size = orsList.size();
            Object[][] data = new Object[size][orColNames.length];
            for (int i=0; i<size; i++) {
                data[i][0] = orsList.get(i).getId(); // ornumber
                data[i][1] = orsList.get(i).getTransactionIndexId(); // account no
                data[i][2] = orsList.get(i).getParticular(); // consumer name
                data[i][3] = orsList.get(i).getTotal() != null ? ObjectHelpers.roundTwo(orsList.get(i).getTotal()) : "0"; // amount paid
                data[i][4] = orsList.get(i).getAmount(); // source
                data[i][5] = orsList.get(i).getCreated_at(); // ordate
                data[i][6] = orsList.get(i).getAccountCode(); // payment used
            }
            
            orModel = new DefaultTableModel(data, orColNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
            
            DefaultTableCellRenderer rightRendererBlue = new DefaultTableCellRenderer();
            rightRendererBlue.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererBlue.setFont(new Font("Arial", Font.BOLD, 12));
            rightRendererBlue.setForeground(Color.BLUE);
            
            searchORTable.setModel(orModel);
            searchORTable.getColumnModel().getColumn(3).setCellRenderer(rightRendererBlue);
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error Searching OR", e.getMessage());
        }
    }
    
    public void addTableCancelCheckCancelPopupMenu(JTable table) {
        try {
            JPopupMenu popupMenu = new JPopupMenu();
            JMenuItem cancel = new JMenuItem("Cancel This OR");
            JMenuItem viewOR = new JMenuItem("View In Full Detail");
            JMenuItem viewConsumer = new JMenuItem("View This Consumer");
            cancel.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    String orNumber = table.getValueAt(table.getSelectedRow(), 0).toString();
                    String source = table.getValueAt(table.getSelectedRow(), 4).toString();
                    String account = table.getValueAt(table.getSelectedRow(), 1).toString();
                    
                    if (orNumber != null) {
                        String reason = JOptionPane.showInputDialog(table, "Provide any reason upon this cancellation", "Cancellation Confirmation", JOptionPane.QUESTION_MESSAGE);
                        if (reason != null) {
                            if (source != null && source.equals("POWER BILL")) {
//                                PaidBills pb = PaidBillsDao.getOneByOR(connection, orNumber);
                                PaidBills pb = PaidBillsDao.getOneByORAndAccount(connection, orNumber, account);
                                System.out.println(pb.getAccountNumber() + " | " + pb.getORNumber());
                                if (pb != null) {
                                    PaidBillsDao.requesetCancelOR(connection, pb, reason, login);
                                    if (orNumberSearch.getText() != null) {
                                        performSearch(orNumberSearch.getText());
                                    } else {
                                        performSearch("All");
                                    }
                                    Notifiers.showInfoMessage("OR Cancelled", "Cancellation request of OR Number " + pb.getORNumber() + " successful.");
                                }
                            } else if (source != null && source.equals("OTHERS")) {
                                TransactionIndex pb = TransactionIndexDao.getOneByOR(connection, orNumber);

                                if (pb != null) {
                                    TransactionIndexDao.requestCancelOR(connection, pb, reason, login);
                                    if (orNumberSearch.getText() != null) {
                                        performSearch(orNumberSearch.getText());
                                    } else {
                                        performSearch("All");
                                    }
                                    Notifiers.showInfoMessage("OR Cancelled", "Cancellation request of OR Number " + pb.getORNumber() + " successful.");
                                }
                            }                                
                        } 
                    } else {
                        Notifiers.showErrorMessage("Selection Error", "Please select the OR item to cancel.");
                    }
                }
            });
            
            viewOR.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                            String orNumber = table.getValueAt(table.getSelectedRow(), 0).toString();
                            String source = table.getValueAt(table.getSelectedRow(), 4).toString();
                            
                            if (source != null && source.equals("POWER BILL")) {
                                PaidBills pb = PaidBillsDao.getOneByOR(connection, orNumber);

                                if (pb != null) {
                                    Desktop.getDesktop().browse(new URI(ConfigFileHelpers.OR_VIEW_URL + pb.getId() + "/BILLS%20PAYMENT"));
                                }
                            } else if (source != null && source.equals("OTHERS")) {
                                TransactionIndex pb = TransactionIndexDao.getOneByOR(connection, orNumber);
                            
                                if (pb != null) {
                                    Desktop.getDesktop().browse(new URI(ConfigFileHelpers.OR_VIEW_URL + pb.getId() + "/OTHER%20PAYMENT"));
                                }
                            }
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        Notifiers.showErrorMessage("Error Showing Details to Browser", ex.getMessage());
                    }
                    
                }
            });
            
            viewConsumer.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                            String orNumber = table.getValueAt(table.getSelectedRow(), 0).toString();
                            String source = table.getValueAt(table.getSelectedRow(), 4).toString();
                            
                            if (source != null && source.equals("POWER BILL")) {
                                PaidBills pb = PaidBillsDao.getOneByOR(connection, orNumber);
                            
                                if (pb != null) {
                                    Desktop.getDesktop().browse(new URI(ConfigFileHelpers.VIEW_ACCOUNT_URL + pb.getAccountNumber()));
                                }
                            } else if (source != null && source.equals("OTHERS")) {
                                TransactionIndex pb = TransactionIndexDao.getOneByOR(connection, orNumber);
                            
                                if (pb != null) {
                                    if (pb.getAccountNumber() != null) {
                                        Desktop.getDesktop().browse(new URI(ConfigFileHelpers.VIEW_ACCOUNT_URL + pb.getAccountNumber()));
                                    } else {
                                        Notifiers.showErrorMessage("No Account Number Found", "This payment isn't tagged to any active account.");
                                    }                                
                                } 
                            }
                            
                                                       
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        Notifiers.showErrorMessage("Error Showing Details to Browser", ex.getMessage());
                    }
                    
                }
            });
            
            popupMenu.addPopupMenuListener(new PopupMenuListener() {
                @Override
                public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            int rowAtPoint = table.rowAtPoint(SwingUtilities.convertPoint(popupMenu, new Point(0, 0), table));
                            if (rowAtPoint > -1) {
                                table.setRowSelectionInterval(rowAtPoint, rowAtPoint);
                            }
                        }
                    });
                }

                @Override
                public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
                    // TODO Auto-generated method stub

                }

                @Override
                public void popupMenuCanceled(PopupMenuEvent e) {
                    // TODO Auto-generated method stub

                }
            });
            popupMenu.add(cancel);
            popupMenu.add(viewOR);
            popupMenu.add(viewConsumer);
            table.setComponentPopupMenu(popupMenu);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
