/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.lopez.julz;

import db.DCRSummaryTransactionsDao;
import db.DatabaseConnection;
import db.PaidBillsDao;
import db.TransactionIndexDao;
import db.UsersDao;
import helpers.ConfigFileHelpers;
import helpers.DCRPrinter;
import helpers.Notifiers;
import helpers.ObjectHelpers;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.URI;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import pojos.DCRSummaryTransactions;
import pojos.PaidBills;
import pojos.Server;
import pojos.TransactionDetails;
import pojos.TransactionIndex;

/**
 *
 * @author Julio Lopez
 */
public class DCRPanel extends javax.swing.JPanel {
    public pojos.Login login;
    
    public Server server;
    public String office;
    
    public DatabaseConnection db;
    public Connection connection;

    public List<DCRSummaryTransactions> dcrSummary;
    public DefaultTableModel dcrSummaryModel;
    public Object[] dcrSummaryColNames = {"GL Code", "Description", "Amount"};
    
    public List<PaidBills> powerBills;
    public DefaultTableModel powerBillsModel;
    public Object[] powerBillsColNames = {"OR Number", "OR Date", "Account No", "Consumer Name", "Billing Mo", "Payment Time", "Kwh Used", "2%", "5%", "Surcharges", "OCL", "Deductions", "Amount Paid"};
    
    public List<TransactionDetails> nonPowerBills;
    public DefaultTableModel nonPowerBillsModel;
    public Object[] nonPowerBillsColNames = {"OR Number", "Payee Name", "Particulars", "Amount Paid"};
    
    public List<TransactionDetails> checkPayments;
    public DefaultTableModel checkPaymentsModel;
    public Object[] checkPaymentsColNames = {"OR Number", "Account No", "Payee Name", "Billing Month", "Check No", "Bank", "Amount", "Source"};
    
    public List<TransactionDetails> cancelledORs;
    public DefaultTableModel cancelledORsModel;
    public Object[] cancelledORsColNames = { "OR Number", "Account Number", "Consumer Name", "Amount Paid", "Source", "Payment Used", "Status"};
    
    public List<PaidBills> checkSummary;
    public DefaultTableModel checkSummaryModel;
    public Object[] checkSummaryColNames = { "Bank", "Check Number", "Amount"};
    
    double cashTotal = 0;
    double checkTotal = 0;
    double dcrSummaryTotal = 0;
    double dcrCorrected = 0;
   
    public DCRPanel(pojos.Login login) {
        this.login = login;
        initComponents();
        
        server = ConfigFileHelpers.getServer();
        office = ConfigFileHelpers.getOffice();
    
        db = new DatabaseConnection();
        connection = db.getDbConnectionFromDatabase(server);
        
        dcrSummary = new ArrayList<>();
        powerBills = new ArrayList<>();
        nonPowerBills = new ArrayList<>();
        checkPayments = new ArrayList<>();
        cancelledORs = new ArrayList<>();
        checkSummary = new ArrayList<>();
        
        dcrDate.getFormattedTextField().setValue(Calendar.getInstance());
        dcrDate.getFormattedTextField().setFont(new Font("Arial", Font.BOLD, 13));
        
        getAllDCR();
        
        addTableCancelPowerBillsPopupMenu(powerBillsTable);
        addTableCancelNonPowerBillsPopupMenu(nonPowerBillsTable);
        addTableCancelCheckCancelPopupMenu(checkPaymentsTable);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        dcrDate = new org.jdatepicker.JDatePicker();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        goBtnDcr = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        dcrSummaryTab = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        totalDcrSummaryLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dcrSummaryTable = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        summaryTable = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        powerBillsTab = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        powerBillsTotal = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        powerBillsTable = new javax.swing.JTable();
        nonPowerBillsTab = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        nonPowerBillsTotalLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        nonPowerBillsTable = new javax.swing.JTable();
        checkPaymentsTab = new javax.swing.JPanel();
        checkPaymentsTotalLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        checkPaymentsTable = new javax.swing.JTable();
        cancelledOrsTab = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        cancelledORsTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        checkSummaryTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/request_quote_FILL1_wght400_GRAD0_opsz24.png"))); // NOI18N
        jLabel1.setText("Daily Collection Report");
        jLabel1.setIconTextGap(10);

        dcrDate.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        dcrDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dcrDateActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 2, 12)); // NOI18N
        jLabel2.setText("Select Date");

        goBtnDcr.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        goBtnDcr.setText("Go");
        goBtnDcr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBtnDcrActionPerformed(evt);
            }
        });

        jTabbedPane1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Arial", 2, 15)); // NOI18N
        jLabel3.setText("Total  :  ");

        totalDcrSummaryLabel.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        totalDcrSummaryLabel.setForeground(new java.awt.Color(204, 51, 0));
        totalDcrSummaryLabel.setText("0.0");

        dcrSummaryTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        dcrSummaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(dcrSummaryTable);

        summaryTable.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        summaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        summaryTable.setRowHeight(28);
        jScrollPane6.setViewportView(summaryTable);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel7.setText("DCR Breakdown");

        jLabel8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel8.setText("Summary");

        javax.swing.GroupLayout dcrSummaryTabLayout = new javax.swing.GroupLayout(dcrSummaryTab);
        dcrSummaryTab.setLayout(dcrSummaryTabLayout);
        dcrSummaryTabLayout.setHorizontalGroup(
            dcrSummaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dcrSummaryTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dcrSummaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 767, Short.MAX_VALUE)
                    .addGroup(dcrSummaryTabLayout.createSequentialGroup()
                        .addGroup(dcrSummaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(dcrSummaryTabLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(totalDcrSummaryLabel))
                            .addComponent(jLabel7))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(dcrSummaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addContainerGap())
        );
        dcrSummaryTabLayout.setVerticalGroup(
            dcrSummaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dcrSummaryTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dcrSummaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dcrSummaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(dcrSummaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalDcrSummaryLabel)
                    .addComponent(jLabel3))
                .addContainerGap())
        );

        jTabbedPane1.addTab("DCR Summary", dcrSummaryTab);

        powerBillsTab.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Arial", 2, 15)); // NOI18N
        jLabel4.setText("Total  :  ");

        powerBillsTotal.setFont(new java.awt.Font("Arial", 1, 17)); // NOI18N
        powerBillsTotal.setForeground(new java.awt.Color(204, 51, 0));
        powerBillsTotal.setText("0.0");

        powerBillsTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        powerBillsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(powerBillsTable);

        javax.swing.GroupLayout powerBillsTabLayout = new javax.swing.GroupLayout(powerBillsTab);
        powerBillsTab.setLayout(powerBillsTabLayout);
        powerBillsTabLayout.setHorizontalGroup(
            powerBillsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(powerBillsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(powerBillsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1193, Short.MAX_VALUE)
                    .addGroup(powerBillsTabLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(powerBillsTotal)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        powerBillsTabLayout.setVerticalGroup(
            powerBillsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, powerBillsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(powerBillsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(powerBillsTotal))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Cash Power Bills Payments", powerBillsTab);

        nonPowerBillsTab.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Arial", 2, 15)); // NOI18N
        jLabel5.setText("Total  :  ");

        nonPowerBillsTotalLabel.setFont(new java.awt.Font("Arial", 1, 17)); // NOI18N
        nonPowerBillsTotalLabel.setForeground(new java.awt.Color(204, 51, 0));
        nonPowerBillsTotalLabel.setText("0.0");

        nonPowerBillsTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        nonPowerBillsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(nonPowerBillsTable);

        javax.swing.GroupLayout nonPowerBillsTabLayout = new javax.swing.GroupLayout(nonPowerBillsTab);
        nonPowerBillsTab.setLayout(nonPowerBillsTabLayout);
        nonPowerBillsTabLayout.setHorizontalGroup(
            nonPowerBillsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nonPowerBillsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(nonPowerBillsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1193, Short.MAX_VALUE)
                    .addGroup(nonPowerBillsTabLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(nonPowerBillsTotalLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        nonPowerBillsTabLayout.setVerticalGroup(
            nonPowerBillsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, nonPowerBillsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(nonPowerBillsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(nonPowerBillsTotalLabel))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Cash Non-Power Bills Payments", nonPowerBillsTab);

        checkPaymentsTotalLabel.setFont(new java.awt.Font("Arial", 1, 17)); // NOI18N
        checkPaymentsTotalLabel.setForeground(new java.awt.Color(204, 51, 0));
        checkPaymentsTotalLabel.setText("0.0");

        jLabel6.setFont(new java.awt.Font("Arial", 2, 15)); // NOI18N
        jLabel6.setText("Total  :  ");

        checkPaymentsTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        checkPaymentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        checkPaymentsTable.setRowHeight(26);
        jScrollPane5.setViewportView(checkPaymentsTable);

        javax.swing.GroupLayout checkPaymentsTabLayout = new javax.swing.GroupLayout(checkPaymentsTab);
        checkPaymentsTab.setLayout(checkPaymentsTabLayout);
        checkPaymentsTabLayout.setHorizontalGroup(
            checkPaymentsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkPaymentsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(checkPaymentsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1193, Short.MAX_VALUE)
                    .addGroup(checkPaymentsTabLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(checkPaymentsTotalLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        checkPaymentsTabLayout.setVerticalGroup(
            checkPaymentsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, checkPaymentsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(checkPaymentsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(checkPaymentsTotalLabel))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Check Payments", checkPaymentsTab);

        cancelledORsTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        cancelledORsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        cancelledORsTable.setRowHeight(26);
        jScrollPane4.setViewportView(cancelledORsTable);

        javax.swing.GroupLayout cancelledOrsTabLayout = new javax.swing.GroupLayout(cancelledOrsTab);
        cancelledOrsTab.setLayout(cancelledOrsTabLayout);
        cancelledOrsTabLayout.setHorizontalGroup(
            cancelledOrsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1213, Short.MAX_VALUE)
            .addGroup(cancelledOrsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(cancelledOrsTabLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1193, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        cancelledOrsTabLayout.setVerticalGroup(
            cancelledOrsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 603, Short.MAX_VALUE)
            .addGroup(cancelledOrsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cancelledOrsTabLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        jTabbedPane1.addTab("Cancelled ORs", cancelledOrsTab);

        checkSummaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane7.setViewportView(checkSummaryTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 1193, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Checks Summary", jPanel1);

        jButton1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton1.setText("Print DCR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTabbedPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dcrDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(goBtnDcr)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(goBtnDcr)
                        .addComponent(dcrDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void goBtnDcrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBtnDcrActionPerformed
        getAllDCR();
    }//GEN-LAST:event_goBtnDcrActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        pojos.Login l = UsersDao.getLogin(connection, login.getId());
        DCRPrinter.printDcr(l, dcrDate.getFormattedTextField().getText(), dcrSummary, powerBills, nonPowerBills, checkPayments, cancelledORs, checkSummary, dcrCorrected);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void dcrDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dcrDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dcrDateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable cancelledORsTable;
    private javax.swing.JPanel cancelledOrsTab;
    private javax.swing.JPanel checkPaymentsTab;
    private javax.swing.JTable checkPaymentsTable;
    private javax.swing.JLabel checkPaymentsTotalLabel;
    private javax.swing.JTable checkSummaryTable;
    private org.jdatepicker.JDatePicker dcrDate;
    private javax.swing.JPanel dcrSummaryTab;
    private javax.swing.JTable dcrSummaryTable;
    private javax.swing.JButton goBtnDcr;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel nonPowerBillsTab;
    private javax.swing.JTable nonPowerBillsTable;
    private javax.swing.JLabel nonPowerBillsTotalLabel;
    private javax.swing.JPanel powerBillsTab;
    private javax.swing.JTable powerBillsTable;
    private javax.swing.JLabel powerBillsTotal;
    private javax.swing.JTable summaryTable;
    private javax.swing.JLabel totalDcrSummaryLabel;
    // End of variables declaration//GEN-END:variables

    public void getAllDCR() {
        cashTotal = 0;
        checkTotal = 0;
        getDcrSummary();
        getPowerBills();
        getNonPowerBills();
        getCheckPayments();
        getCancelledOrs();
        getSummary();
        getCheckSummary();
    }
    
    public void getSummary() {
        try {
            Object data[][] = new Object[3][2];
            data[0][0] = "Cash Total";
            data[1][0] = "Check Total";
            data[2][0] = "Total";
            data[0][1] = ObjectHelpers.roundTwo(cashTotal + "");
            data[1][1] = ObjectHelpers.roundTwo(checkTotal + "");
            data[2][1] = ObjectHelpers.roundTwo((checkTotal + cashTotal) + "");
            
            DefaultTableCellRenderer rightRendererBlue = new DefaultTableCellRenderer();
            rightRendererBlue.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererBlue.setFont(new Font("Arial", Font.BOLD, 12));
            rightRendererBlue.setForeground(Color.BLUE);
            
            DefaultTableModel df = new DefaultTableModel(data, new Object[]{"Item", "Amount"}) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };            
            summaryTable.setModel(df);
            summaryTable.getColumnModel().getColumn(1).setCellRenderer(rightRendererBlue);
            
            // RECORRECT DCR
            double ttl = checkTotal + cashTotal;
            double dif = ttl - dcrSummaryTotal;
            
            if (dif > -10 && dif < 10) {
                totalDcrSummaryLabel.setText(ObjectHelpers.roundTwo(ttl + ""));
                dcrCorrected = ttl;
            } else {
                dcrCorrected = dcrSummaryTotal;
            }
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error Getting Summary", e.getMessage());
        } 
    }
    
    public void getDcrSummary() {
        try {
            dcrSummary.clear();
            if (dcrSummaryModel != null) {
                dcrSummaryModel.getDataVector().removeAllElements();
                dcrSummaryModel.fireTableDataChanged();
            }
            
            dcrSummary.addAll(DCRSummaryTransactionsDao.getDcrSummary(connection, ObjectHelpers.formatSqlDate(dcrDate.getFormattedTextField().getText()), login.getId()));
            int dcrSize = dcrSummary.size();
            dcrSummaryTotal = 0;
            Object[][] data = new Object[dcrSize][dcrSummaryColNames.length];
            int tbIndex = 0;
            for (int i=0; i<dcrSize; i++) {
                if (dcrSummary.get(i).getAmount() != null && Double.valueOf(dcrSummary.get(i).getAmount()) != 0) {
                    data[tbIndex][0] = dcrSummary.get(i).getGLCode();
                    data[tbIndex][1] = dcrSummary.get(i).getDescription();
                    data[tbIndex][2] = ObjectHelpers.roundTwo(dcrSummary.get(i).getAmount());
                    dcrSummaryTotal += Double.valueOf(ObjectHelpers.roundTwoNoComma(dcrSummary.get(i).getAmount()));
                    tbIndex++;
                } 
            }
            dcrSummaryModel = new DefaultTableModel(data, dcrSummaryColNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }                
            };
            DefaultTableCellRenderer rightRendererBlue = new DefaultTableCellRenderer();
            rightRendererBlue.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererBlue.setFont(new Font("Arial", Font.BOLD, 12));
            rightRendererBlue.setForeground(Color.BLUE);
            
            dcrSummaryTable.setModel(dcrSummaryModel);
            dcrSummaryTable.setRowHeight(28);
            dcrSummaryTable.getColumnModel().getColumn(0).setMaxWidth(120);
            dcrSummaryTable.getColumnModel().getColumn(0).setMinWidth(110);
            dcrSummaryTable.getColumnModel().getColumn(2).setMaxWidth(150);
            dcrSummaryTable.getColumnModel().getColumn(2).setMinWidth(110);
            dcrSummaryTable.getColumnModel().getColumn(2).setCellRenderer(rightRendererBlue);
            dcrSummaryTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
            
            totalDcrSummaryLabel.setText(ObjectHelpers.roundTwo(dcrSummaryTotal + ""));
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error Getting Summary Transactions", e.getMessage());
        }
    }

    public void getPowerBills() {
        try {
            powerBills.clear();
            if (powerBillsModel != null) {
                powerBillsModel.getDataVector().removeAllElements();
                powerBillsModel.fireTableDataChanged();
            }
            
            powerBills.addAll(PaidBillsDao.getCashPowerBills(connection, ObjectHelpers.formatSqlDate(dcrDate.getFormattedTextField().getText()), login.getId()));
            Iterator<PaidBills> itr = powerBills.listIterator();
            while (itr.hasNext()) {
                PaidBills pb = itr.next();
                double amntNet = pb.getNetAmount() != null ? Double.valueOf(pb.getNetAmount()) : 0;
                if (amntNet == 0 && pb.getPaymentUsed().equals("Cash and Check")) {
                    itr.remove();
                } 
            }
            
            int powerBillsSize = powerBills.size();
            double powerBillsTotal = 0;
            Object[][] data = new Object[powerBillsSize][powerBillsColNames.length];
            for (int i=0; i<powerBillsSize; i++) {
                data[i][0] = powerBills.get(i).getORNumber();
                data[i][1] = powerBills.get(i).getORDate();
                data[i][2] = powerBills.get(i).getAccountNumber();
                data[i][3] = powerBills.get(i).getId(); // CONSUMER NAME
                data[i][4] = powerBills.get(i).getServicePeriod();
                data[i][5] = powerBills.get(i).getPostingTime();
                data[i][6] = powerBills.get(i).getKwhUsed();
                data[i][7] = powerBills.get(i).getForm2307TwoPercent() != null ? ObjectHelpers.roundTwo(powerBills.get(i).getForm2307TwoPercent()) : "0";
                data[i][8] = powerBills.get(i).getForm2307FivePercent() != null ? ObjectHelpers.roundTwo(powerBills.get(i).getForm2307FivePercent()) : "0";
                data[i][9] = powerBills.get(i).getSurcharge() != null ? ObjectHelpers.roundTwo(powerBills.get(i).getSurcharge()) : "0";
                data[i][10] = powerBills.get(i).getAdditionalCharges() != null ? ObjectHelpers.roundTwo(powerBills.get(i).getAdditionalCharges()) : "0";
                data[i][11] = powerBills.get(i).getDeductions() != null ? ObjectHelpers.roundTwo(powerBills.get(i).getDeductions()) : "0";
                data[i][12] = powerBills.get(i).getNetAmount() != null ? ObjectHelpers.roundTwo(powerBills.get(i).getNetAmount()) : "0";
                powerBillsTotal += (powerBills.get(i).getNetAmount() != null ? Double.valueOf(powerBills.get(i).getNetAmount()) : 0);                                   
            }
            powerBillsModel = new DefaultTableModel(data, powerBillsColNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }                
            };
            
            DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
            rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
            
            DefaultTableCellRenderer rightRendererBlue = new DefaultTableCellRenderer();
            rightRendererBlue.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererBlue.setFont(new Font("Arial", Font.BOLD, 12));
            rightRendererBlue.setForeground(Color.BLUE);
            
            DefaultTableCellRenderer rightRendererTeal = new DefaultTableCellRenderer();
            rightRendererTeal.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererTeal.setFont(new Font("Arial", Font.BOLD, 12));
            rightRendererTeal.setForeground(Color.decode("#009688"));
            
            DefaultTableCellRenderer rightRendererRed = new DefaultTableCellRenderer();
            rightRendererRed.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererRed.setFont(new Font("Arial", Font.BOLD, 12));
            rightRendererRed.setForeground(Color.decode("#d32f2f"));
            
            powerBillsTable.setModel(powerBillsModel);
            powerBillsTable.setRowHeight(28);
            powerBillsTable.getColumnModel().getColumn(0).setMaxWidth(60);
            powerBillsTable.getColumnModel().getColumn(0).setMinWidth(50);
            powerBillsTable.getColumnModel().getColumn(1).setMaxWidth(100);
            powerBillsTable.getColumnModel().getColumn(1).setMinWidth(70);
            powerBillsTable.getColumnModel().getColumn(2).setMaxWidth(110);
            powerBillsTable.getColumnModel().getColumn(2).setMinWidth(90);
            powerBillsTable.getColumnModel().getColumn(4).setMaxWidth(100);
            powerBillsTable.getColumnModel().getColumn(4).setMinWidth(70);
            powerBillsTable.getColumnModel().getColumn(5).setMaxWidth(100);
            powerBillsTable.getColumnModel().getColumn(5).setMinWidth(80);
            powerBillsTable.getColumnModel().getColumn(6).setMaxWidth(60);
            powerBillsTable.getColumnModel().getColumn(6).setMinWidth(40);
            powerBillsTable.getColumnModel().getColumn(6).setCellRenderer(rightRenderer);
            powerBillsTable.getColumnModel().getColumn(7).setMaxWidth(70);
            powerBillsTable.getColumnModel().getColumn(7).setMinWidth(50);
            powerBillsTable.getColumnModel().getColumn(7).setCellRenderer(rightRendererTeal);
            powerBillsTable.getColumnModel().getColumn(8).setMaxWidth(70);
            powerBillsTable.getColumnModel().getColumn(8).setMinWidth(50);
            powerBillsTable.getColumnModel().getColumn(8).setCellRenderer(rightRendererTeal);
            powerBillsTable.getColumnModel().getColumn(9).setMaxWidth(80);
            powerBillsTable.getColumnModel().getColumn(9).setMinWidth(60);
            powerBillsTable.getColumnModel().getColumn(9).setCellRenderer(rightRendererRed);
            powerBillsTable.getColumnModel().getColumn(10).setMaxWidth(90);
            powerBillsTable.getColumnModel().getColumn(10).setMinWidth(60);
            powerBillsTable.getColumnModel().getColumn(10).setCellRenderer(rightRendererRed);
            powerBillsTable.getColumnModel().getColumn(11).setMaxWidth(90);
            powerBillsTable.getColumnModel().getColumn(11).setMinWidth(60);
            powerBillsTable.getColumnModel().getColumn(11).setCellRenderer(rightRendererTeal);
            powerBillsTable.getColumnModel().getColumn(12).setMaxWidth(130);
            powerBillsTable.getColumnModel().getColumn(12).setMinWidth(100);
            powerBillsTable.getColumnModel().getColumn(12).setCellRenderer(rightRendererBlue);
            powerBillsTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
            
            this.powerBillsTotal.setText("(" + powerBillsSize + ") " + ObjectHelpers.roundTwo(powerBillsTotal + ""));
            cashTotal += powerBillsTotal;
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error Getting Power Bills", e.getMessage());
        }
    }
    
    public void getNonPowerBills() {
        try {
            nonPowerBills.clear();
            if (nonPowerBillsModel != null) {
                nonPowerBillsModel.getDataVector().removeAllElements();
                nonPowerBillsModel.fireTableDataChanged();
            }
            
            nonPowerBills.addAll(TransactionIndexDao.getDcr(connection, ObjectHelpers.formatSqlDate(dcrDate.getFormattedTextField().getText()), login.getId()));
            int npbSize = nonPowerBills.size();
            double nonPowerBillsTotal = 0;
            Object[][] data = new Object[npbSize][nonPowerBillsColNames.length];
            String prevHolder = "", prev = "";
            for (int i=0; i<npbSize; i++) {
                prevHolder = nonPowerBills.get(i).getId();
                data[i][0] = prevHolder.equals(prev) ? "" : nonPowerBills.get(i).getId();
                data[i][1] = prevHolder.equals(prev) ? "" : nonPowerBills.get(i).getVAT(); // payee name
                data[i][2] = nonPowerBills.get(i).getParticular();
                data[i][3] = ObjectHelpers.roundTwo(nonPowerBills.get(i).getTotal());
                nonPowerBillsTotal += Double.valueOf(nonPowerBills.get(i).getTotal());   
                prev = prevHolder;                
            }
            nonPowerBillsModel = new DefaultTableModel(data, nonPowerBillsColNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }                
            };
            
            DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
            rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
            
            DefaultTableCellRenderer rightRendererBlue = new DefaultTableCellRenderer();
            rightRendererBlue.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererBlue.setFont(new Font("Arial", Font.BOLD, 12));
            rightRendererBlue.setForeground(Color.BLUE);
            
            DefaultTableCellRenderer rightRendererTeal = new DefaultTableCellRenderer();
            rightRendererTeal.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererTeal.setFont(new Font("Arial", Font.BOLD, 12));
            rightRendererTeal.setForeground(Color.decode("#009688"));
            
            DefaultTableCellRenderer rightRendererRed = new DefaultTableCellRenderer();
            rightRendererRed.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererRed.setFont(new Font("Arial", Font.BOLD, 12));
            rightRendererRed.setForeground(Color.decode("#d32f2f"));
            
            nonPowerBillsTable.setModel(nonPowerBillsModel);
            nonPowerBillsTable.setRowHeight(28);
            nonPowerBillsTable.getColumnModel().getColumn(0).setMaxWidth(60);
            nonPowerBillsTable.getColumnModel().getColumn(0).setMinWidth(50);
            nonPowerBillsTable.getColumnModel().getColumn(3).setMaxWidth(130);
            nonPowerBillsTable.getColumnModel().getColumn(3).setMinWidth(100);
            nonPowerBillsTable.getColumnModel().getColumn(3).setCellRenderer(rightRendererBlue);
            
            nonPowerBillsTotalLabel.setText("(" + npbSize + ") " + ObjectHelpers.roundTwo(nonPowerBillsTotal + ""));
            
            cashTotal += nonPowerBillsTotal;
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error Getting Non-Power Bills", e.getMessage());
        }
    }
    
    public void getCheckPayments() {
        try {
            checkPayments.clear();
            if (checkPaymentsModel != null) {
                checkPaymentsModel.getDataVector().removeAllElements();
                checkPaymentsModel.fireTableDataChanged();
            }
            
            checkPayments.addAll(DCRSummaryTransactionsDao.getCheckPayments(connection, ObjectHelpers.formatSqlDate(dcrDate.getFormattedTextField().getText()), login.getId()));
            int checkSize = checkPayments.size();
            double checkPaymentsTotal = 0;
            Object[][] data = new Object[checkSize][checkPaymentsColNames.length];
            String prevHolder = "", prev = "";
            for (int i=0; i<checkSize; i++) {
                data[i][0] = checkPayments.get(i).getId(); // OR NUMBER
                data[i][1] = checkPayments.get(i).getTransactionIndexId(); // ACCOUNT NUMBER
                data[i][2] = checkPayments.get(i).getParticular(); // PAYEE NAME/ACCOUNT NAME
                data[i][3] = checkPayments.get(i).getCreated_at() == null || checkPayments.get(i).getCreated_at().equals("1970-01-01") ? "" : checkPayments.get(i).getCreated_at(); // BILLING MONTH
                data[i][4] = checkPayments.get(i).getVAT(); // CHECK NO
                data[i][5] = checkPayments.get(i).getAccountCode(); // BANK
                data[i][6] = ObjectHelpers.roundTwo(checkPayments.get(i).getTotal());
                data[i][7] = checkPayments.get(i).getAmount();
                checkPaymentsTotal += Double.valueOf(checkPayments.get(i).getTotal());   
                prev = prevHolder;                
            }
            checkPaymentsModel = new DefaultTableModel(data, checkPaymentsColNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }                
            };
            
            DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
            rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
            
            DefaultTableCellRenderer rightRendererBlue = new DefaultTableCellRenderer();
            rightRendererBlue.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererBlue.setFont(new Font("Arial", Font.BOLD, 12));
            rightRendererBlue.setForeground(Color.BLUE);
            
            DefaultTableCellRenderer rightRendererTeal = new DefaultTableCellRenderer();
            rightRendererTeal.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererTeal.setFont(new Font("Arial", Font.BOLD, 12));
            rightRendererTeal.setForeground(Color.decode("#009688"));
            
            DefaultTableCellRenderer rightRendererRed = new DefaultTableCellRenderer();
            rightRendererRed.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererRed.setFont(new Font("Arial", Font.BOLD, 12));
            rightRendererRed.setForeground(Color.decode("#d32f2f"));
            
            checkPaymentsTable.setModel(checkPaymentsModel);
            checkPaymentsTable.setRowHeight(28);
            checkPaymentsTable.getColumnModel().getColumn(0).setMaxWidth(170);
            checkPaymentsTable.getColumnModel().getColumn(0).setMinWidth(50);
            checkPaymentsTable.getColumnModel().getColumn(1).setMaxWidth(130);
            checkPaymentsTable.getColumnModel().getColumn(1).setMinWidth(120);
            checkPaymentsTable.getColumnModel().getColumn(3).setMaxWidth(200);
            checkPaymentsTable.getColumnModel().getColumn(3).setMinWidth(180);
            checkPaymentsTable.getColumnModel().getColumn(3).setCellRenderer(rightRenderer);
            checkPaymentsTable.getColumnModel().getColumn(4).setMaxWidth(130);
            checkPaymentsTable.getColumnModel().getColumn(4).setMinWidth(100);
            checkPaymentsTable.getColumnModel().getColumn(5).setMaxWidth(180);
            checkPaymentsTable.getColumnModel().getColumn(5).setMinWidth(150);
            checkPaymentsTable.getColumnModel().getColumn(5).setCellRenderer(rightRendererBlue);
            checkPaymentsTable.getColumnModel().getColumn(6).setMaxWidth(180);
            checkPaymentsTable.getColumnModel().getColumn(6).setMinWidth(150);
            
            checkPaymentsTotalLabel.setText("(" + checkSize + ") " + ObjectHelpers.roundTwo(checkPaymentsTotal + ""));
            
            checkTotal += checkPaymentsTotal;
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error Getting Check Payments", e.getMessage());
        }
    }
    
    public void getCheckSummary() {
        try {
            checkSummary.clear();
            if (checkSummaryModel != null) {
                checkSummaryModel.getDataVector().removeAllElements();
                checkSummaryModel.fireTableDataChanged();
            }
            
            checkSummary.addAll(PaidBillsDao.getCheckSummary(connection, ObjectHelpers.formatSqlDate(dcrDate.getFormattedTextField().getText()), login.getId()));
            int checkSize = checkSummary.size();
            Object[][] data = new Object[checkSize][checkSummaryColNames.length];
            for (int i=0; i<checkSize; i++) {
                data[i][0] = checkSummary.get(i).getBank(); 
                data[i][1] = checkSummary.get(i).getCheckNo(); 
                data[i][2] = ObjectHelpers.roundTwo(checkSummary.get(i).getNetAmount()); 
            }
            checkSummaryModel = new DefaultTableModel(data, checkSummaryColNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }                
            };
            
            DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
            rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
            
            DefaultTableCellRenderer rightRendererBlue = new DefaultTableCellRenderer();
            rightRendererBlue.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererBlue.setFont(new Font("Arial", Font.BOLD, 12));
            rightRendererBlue.setForeground(Color.BLUE);
            
            DefaultTableCellRenderer rightRendererTeal = new DefaultTableCellRenderer();
            rightRendererTeal.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererTeal.setFont(new Font("Arial", Font.BOLD, 12));
            rightRendererTeal.setForeground(Color.decode("#009688"));
            
            DefaultTableCellRenderer rightRendererRed = new DefaultTableCellRenderer();
            rightRendererRed.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererRed.setFont(new Font("Arial", Font.BOLD, 12));
            rightRendererRed.setForeground(Color.decode("#d32f2f"));
            
            checkSummaryTable.setModel(checkSummaryModel);
            checkSummaryTable.setRowHeight(28);
            checkSummaryTable.getColumnModel().getColumn(0).setMaxWidth(170);
            checkSummaryTable.getColumnModel().getColumn(0).setMinWidth(90);
            checkSummaryTable.getColumnModel().getColumn(1).setMaxWidth(250);
            checkSummaryTable.getColumnModel().getColumn(1).setMinWidth(180);
            
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error Getting Check Summary", e.getMessage());
        }
    }
    
    public void getCancelledOrs() {
        try {
            cancelledORs.clear();
            if (cancelledORsModel != null) {
                cancelledORsModel.getDataVector().removeAllElements();
                cancelledORsModel.fireTableDataChanged();
            }
            
            cancelledORs.addAll(DCRSummaryTransactionsDao.getCancelledORs(connection, ObjectHelpers.formatSqlDate(dcrDate.getFormattedTextField().getText()), login.getId()));
            int size = cancelledORs.size();
            Object[][] data = new Object[size][cancelledORsColNames.length];
            for (int i=0; i<size; i++) {
                data[i][0] = cancelledORs.get(i).getId(); // ornumber
                data[i][1] = cancelledORs.get(i).getTransactionIndexId(); // account no
                data[i][2] = cancelledORs.get(i).getParticular(); // consumer name
                data[i][3] = cancelledORs.get(i).getTotal() != null ? ObjectHelpers.roundTwo(cancelledORs.get(i).getTotal()) : "0"; // amount paid
                data[i][4] = cancelledORs.get(i).getAmount(); // source
                data[i][5] = cancelledORs.get(i).getAccountCode(); // payment used
                data[i][6] = cancelledORs.get(i).getCreated_at(); // status
            }
            
            cancelledORsModel = new DefaultTableModel(data, cancelledORsColNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
            
            DefaultTableCellRenderer rightRendererBlue = new DefaultTableCellRenderer();
            rightRendererBlue.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererBlue.setFont(new Font("Arial", Font.BOLD, 12));
            rightRendererBlue.setForeground(Color.BLUE);
            
            cancelledORsTable.setModel(cancelledORsModel);
            cancelledORsTable.getColumnModel().getColumn(3).setCellRenderer(rightRendererBlue);
        } catch (Exception e) {
            Notifiers.showErrorMessage("Error Getting Cancelled ORs", e.getMessage());
        }
    }
    
    public void addTableCancelPowerBillsPopupMenu(JTable table) {
        try {
            JPopupMenu popupMenu = new JPopupMenu();
            JMenuItem cancel = new JMenuItem("Cancel This OR");
            JMenuItem viewOR = new JMenuItem("View In Full Detail");
            JMenuItem viewConsumer = new JMenuItem("View This Consumer");
            cancel.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    String orNumber = table.getValueAt(table.getSelectedRow(), 0).toString();
                    String account = table.getValueAt(table.getSelectedRow(), 2).toString();
                    
                    if (orNumber != null) {
                        String reason = JOptionPane.showInputDialog(cancelledORsTable, "Provide any reason upon this cancellation", "Cancellation Confirmation", JOptionPane.QUESTION_MESSAGE);
                        if (reason != null) {
                            PaidBills pb = PaidBillsDao.getOneByORAndAccount(connection, orNumber, account);
                            
                            if (pb != null) {
                                PaidBillsDao.requesetCancelOR(connection, pb, reason, login);
                                getAllDCR();
                                Notifiers.showInfoMessage("OR Cancelled", "Cancellation request of OR Number " + pb.getORNumber() + " successful.");
                            }
                        } 
                    } else {
                        Notifiers.showErrorMessage("Selection Error", "Please select the OR item to cancel.");
                    }
                }
            });
            
            viewOR.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                            String orNumber = table.getValueAt(table.getSelectedRow(), 0).toString();
                            PaidBills pb = PaidBillsDao.getOneByOR(connection, orNumber);
                            
                            if (pb != null) {
                                Desktop.getDesktop().browse(new URI(ConfigFileHelpers.OR_VIEW_URL + pb.getId() + "/BILLS%20PAYMENT"));
                            }
                            
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        Notifiers.showErrorMessage("Error Showing Details to Browser", ex.getMessage());
                    }
                    
                }
            });
            
            viewConsumer.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                            String orNumber = table.getValueAt(table.getSelectedRow(), 0).toString();
                            PaidBills pb = PaidBillsDao.getOneByOR(connection, orNumber);
                            
                            if (pb != null) {
                                Desktop.getDesktop().browse(new URI(ConfigFileHelpers.VIEW_ACCOUNT_URL + pb.getAccountNumber()));
                            }
                            
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        Notifiers.showErrorMessage("Error Showing Details to Browser", ex.getMessage());
                    }
                    
                }
            });
            
            popupMenu.addPopupMenuListener(new PopupMenuListener() {
                @Override
                public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            int rowAtPoint = table.rowAtPoint(SwingUtilities.convertPoint(popupMenu, new Point(0, 0), table));
                            if (rowAtPoint > -1) {
                                table.setRowSelectionInterval(rowAtPoint, rowAtPoint);
                            }
                        }
                    });
                }

                @Override
                public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
                    // TODO Auto-generated method stub

                }

                @Override
                public void popupMenuCanceled(PopupMenuEvent e) {
                    // TODO Auto-generated method stub

                }
            });
            popupMenu.add(cancel);
            popupMenu.add(viewOR);
            popupMenu.add(viewConsumer);
            table.setComponentPopupMenu(popupMenu);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void addTableCancelNonPowerBillsPopupMenu(JTable table) {
        try {
            JPopupMenu popupMenu = new JPopupMenu();
            JMenuItem cancel = new JMenuItem("Cancel This OR");
            JMenuItem viewOR = new JMenuItem("View In Full Detail");
            JMenuItem viewConsumer = new JMenuItem("View This Consumer");
            cancel.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    String orNumber = table.getValueAt(table.getSelectedRow(), 0).toString();
                    
                    if (orNumber != null) {
                        String reason = JOptionPane.showInputDialog(cancelledORsTable, "Provide any reason upon this cancellation", "Cancellation Confirmation", JOptionPane.QUESTION_MESSAGE);
                        if (reason != null) {
                            TransactionIndex pb = TransactionIndexDao.getOneByOR(connection, orNumber);
                            
                            if (pb != null) {
                                TransactionIndexDao.requestCancelOR(connection, pb, reason, login);
                                getAllDCR();
                                Notifiers.showInfoMessage("OR Cancelled", "Cancellation request of OR Number " + pb.getORNumber() + " successful.");
                            }
                        } 
                    } else {
                        Notifiers.showErrorMessage("Selection Error", "Please select the OR item to cancel.");
                    }
                }
            });
            
            viewOR.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                            String orNumber = table.getValueAt(table.getSelectedRow(), 0).toString();
                            TransactionIndex pb = TransactionIndexDao.getOneByOR(connection, orNumber);
                            
                            if (pb != null) {
                                Desktop.getDesktop().browse(new URI(ConfigFileHelpers.OR_VIEW_URL + pb.getId() + "/OTHER%20PAYMENT"));
                            }                            
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        Notifiers.showErrorMessage("Error Showing Details to Browser", ex.getMessage());
                    }
                    
                }
            });
            
            viewConsumer.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                            String orNumber = table.getValueAt(table.getSelectedRow(), 0).toString();
                            TransactionIndex pb = TransactionIndexDao.getOneByOR(connection, orNumber);
                            
                            if (pb != null) {
                                if (pb.getAccountNumber() != null) {
                                    Desktop.getDesktop().browse(new URI(ConfigFileHelpers.VIEW_ACCOUNT_URL + pb.getAccountNumber()));
                                } else {
                                    Notifiers.showErrorMessage("No Account Number Found", "This payment isn't tagged to any active account.");
                                }                                
                            }                            
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        Notifiers.showErrorMessage("Error Showing Details to Browser", ex.getMessage());
                    }
                    
                }
            });
            
            popupMenu.addPopupMenuListener(new PopupMenuListener() {
                @Override
                public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            int rowAtPoint = table.rowAtPoint(SwingUtilities.convertPoint(popupMenu, new Point(0, 0), table));
                            if (rowAtPoint > -1) {
                                table.setRowSelectionInterval(rowAtPoint, rowAtPoint);
                            }
                        }
                    });
                }

                @Override
                public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
                    // TODO Auto-generated method stub

                }

                @Override
                public void popupMenuCanceled(PopupMenuEvent e) {
                    
                }
            });
            popupMenu.add(cancel);
            popupMenu.add(viewOR);
            popupMenu.add(viewConsumer);
            table.setComponentPopupMenu(popupMenu);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void addTableCancelCheckCancelPopupMenu(JTable table) {
        try {
            JPopupMenu popupMenu = new JPopupMenu();
            JMenuItem cancel = new JMenuItem("Cancel This OR");
            JMenuItem viewOR = new JMenuItem("View In Full Detail");
            JMenuItem viewConsumer = new JMenuItem("View This Consumer");
            cancel.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    String orNumber = table.getValueAt(table.getSelectedRow(), 0).toString();
                    String source = table.getValueAt(table.getSelectedRow(), 7).toString();
                    String account = table.getValueAt(table.getSelectedRow(), 1).toString();
                    
                    if (orNumber != null) {
                        String reason = JOptionPane.showInputDialog(cancelledORsTable, "Provide any reason upon this cancellation", "Cancellation Confirmation", JOptionPane.QUESTION_MESSAGE);
                        if (reason != null) {
                            if (source != null && source.equals("POWER BILL")) {
                                PaidBills pb = PaidBillsDao.getOneByORAndAccount(connection, orNumber, account);
                            
                                if (pb != null) {
                                    PaidBillsDao.requesetCancelOR(connection, pb, reason, login);
                                    getAllDCR();
                                    Notifiers.showInfoMessage("OR Cancelled", "Cancellation request of OR Number " + pb.getORNumber() + " successful.");
                                }
                            } else if (source != null && source.equals("OTHERS")) {
                                TransactionIndex pb = TransactionIndexDao.getOneByOR(connection, orNumber);

                                if (pb != null) {
                                    TransactionIndexDao.requestCancelOR(connection, pb, reason, login);
                                    getAllDCR();
                                    Notifiers.showInfoMessage("OR Cancelled", "Cancellation request of OR Number " + pb.getORNumber() + " successful.");
                                }
                            }                                
                        } 
                    } else {
                        Notifiers.showErrorMessage("Selection Error", "Please select the OR item to cancel.");
                    }
                }
            });
            
            viewOR.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                            String orNumber = table.getValueAt(table.getSelectedRow(), 0).toString();
                            String source = table.getValueAt(table.getSelectedRow(), 6).toString();
                            
                            if (source != null && source.equals("POWER BILL")) {
                                PaidBills pb = PaidBillsDao.getOneByOR(connection, orNumber);

                                if (pb != null) {
                                    Desktop.getDesktop().browse(new URI(ConfigFileHelpers.OR_VIEW_URL + pb.getId() + "/BILLS%20PAYMENT"));
                                }
                            } else if (source != null && source.equals("OTHERS")) {
                                TransactionIndex pb = TransactionIndexDao.getOneByOR(connection, orNumber);
                            
                                if (pb != null) {
                                    Desktop.getDesktop().browse(new URI(ConfigFileHelpers.OR_VIEW_URL + pb.getId() + "/OTHER%20PAYMENT"));
                                }
                            }
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        Notifiers.showErrorMessage("Error Showing Details to Browser", ex.getMessage());
                    }                    
                }
            });
            
            viewConsumer.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                            String orNumber = table.getValueAt(table.getSelectedRow(), 0).toString();
                            String source = table.getValueAt(table.getSelectedRow(), 6).toString();
                            
                            if (source != null && source.equals("POWER BILL")) {
                                PaidBills pb = PaidBillsDao.getOneByOR(connection, orNumber);
                            
                                if (pb != null) {
                                    Desktop.getDesktop().browse(new URI(ConfigFileHelpers.VIEW_ACCOUNT_URL + pb.getAccountNumber()));
                                }
                            } else if (source != null && source.equals("OTHERS")) {
                                TransactionIndex pb = TransactionIndexDao.getOneByOR(connection, orNumber);
                            
                                if (pb != null) {
                                    if (pb.getAccountNumber() != null) {
                                        Desktop.getDesktop().browse(new URI(ConfigFileHelpers.VIEW_ACCOUNT_URL + pb.getAccountNumber()));
                                    } else {
                                        Notifiers.showErrorMessage("No Account Number Found", "This payment isn't tagged to any active account.");
                                    }                                
                                } 
                            }
                            
                                                       
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        Notifiers.showErrorMessage("Error Showing Details to Browser", ex.getMessage());
                    }
                    
                }
            });
            
            popupMenu.addPopupMenuListener(new PopupMenuListener() {
                @Override
                public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            int rowAtPoint = table.rowAtPoint(SwingUtilities.convertPoint(popupMenu, new Point(0, 0), table));
                            if (rowAtPoint > -1) {
                                table.setRowSelectionInterval(rowAtPoint, rowAtPoint);
                            }
                        }
                    });
                }

                @Override
                public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
                    // TODO Auto-generated method stub

                }

                @Override
                public void popupMenuCanceled(PopupMenuEvent e) {
                    // TODO Auto-generated method stub

                }
            });
            popupMenu.add(cancel);
            popupMenu.add(viewOR);
            popupMenu.add(viewConsumer);
            table.setComponentPopupMenu(popupMenu);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
