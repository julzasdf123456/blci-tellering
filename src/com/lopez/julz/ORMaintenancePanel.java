/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.lopez.julz;

import db.DCRSummaryTransactionsDao;
import db.DatabaseConnection;
import db.PaidBillsDao;
import db.TransactionIndexDao;
import helpers.ConfigFileHelpers;
import helpers.Notifiers;
import helpers.ObjectHelpers;
import java.awt.Color;
import java.awt.Font;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import pojos.Server;
import pojos.TransactionDetails;

/**
 *
 * @author Julio Lopez
 */
public class ORMaintenancePanel extends javax.swing.JPanel {
    public pojos.Login login;
    
    public Server server;
    public String office;
    
    public DatabaseConnection db;
    public Connection connection;
    
    public List<TransactionDetails> orsList;
    public DefaultTableModel orModel;
    public Object[] orColNames = { "OR Number", "Account Number", "Consumer Name", "Amount Paid", "Source", "Payment Used" };
    
    /**
     * Creates new form ORMaintenance
     */
    public ORMaintenancePanel(pojos.Login login) {
        this.login = login;
        initComponents();
        
        server = ConfigFileHelpers.getServer();
        office = ConfigFileHelpers.getOffice();
    
        db = new DatabaseConnection();
        connection = db.getDbConnectionFromDatabase(server);
        
        orsList = new ArrayList<>();
        
//        getOrs();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orMaintenanceTable = new javax.swing.JTable();

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/build_FILL1_wght400_GRAD0_opsz20.png"))); // NOI18N
        jLabel1.setText("OR Maintenance");
        jLabel1.setIconTextGap(10);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Date");

        orMaintenanceTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        orMaintenanceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        orMaintenanceTable.setRowHeight(28);
        jScrollPane1.setViewportView(orMaintenanceTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2))
                    .addComponent(jSeparator1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1106, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 684, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable orMaintenanceTable;
    // End of variables declaration//GEN-END:variables

    public void getOrs() {
        try {
            orsList.clear();
            
            orsList.addAll(DCRSummaryTransactionsDao.getORsToday(connection, ObjectHelpers.getSqlDate(), login.getId()));
            int size = orsList.size();
            Object[][] data = new Object[size][orColNames.length];
            for (int i=0; i<size; i++) {
                data[i][0] = orsList.get(i).getId(); // ornumber
                data[i][1] = orsList.get(i).getTransactionIndexId(); // account no
                data[i][2] = orsList.get(i).getParticular(); // consumer name
                data[i][3] = orsList.get(i).getTotal() != null ? ObjectHelpers.roundTwo(orsList.get(i).getTotal()) : "0"; // amount paid
                data[i][4] = orsList.get(i).getAmount(); // source
                data[i][5] = orsList.get(i).getAccountCode(); // payment used
            }
            
            orModel = new DefaultTableModel(data, orColNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    if (column == 0) {
                        return true;
                    } else {
                        return false;
                    }
                }
            };
            
            DefaultTableCellRenderer rightRendererBlue = new DefaultTableCellRenderer();
            rightRendererBlue.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererBlue.setFont(new Font("Arial", Font.BOLD, 12));
            rightRendererBlue.setForeground(Color.BLUE);
            
            orMaintenanceTable.setModel(orModel);
            orMaintenanceTable.getColumnModel().getColumn(3).setCellRenderer(rightRendererBlue);
            orMaintenanceTable.getModel().addTableModelListener(new TableModelListener() {
                @Override
                public void tableChanged(TableModelEvent e) {
                    try {
                        int selectedRow = orMaintenanceTable.getSelectedRow();
                        TransactionDetails td = orsList.get(selectedRow);
                        String orNew = orMaintenanceTable.getModel().getValueAt(selectedRow, 0).toString();
                        String source = td.getAmount();
                        String id = td.getVAT();
                        String oldOr = td.getId();
                        String period = td.getCreated_at(); // SERVICE PERIOD
                        updateORNumber(id, source, oldOr, orNew, period);
//                        System.out.println(orNew + " - " + oldOr + " - " + " " + id);
                        orsList.get(selectedRow).setId(orNew);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        Notifiers.showErrorMessage("Error Editing Table", ex.getMessage());
                    }
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error Showing ORs", e.getMessage());
        }
    }
    
    public void updateORNumber(String id, String source, String oldOr, String newOr, String period) {
        try {
            if (source.equals("POWER BILL")) {
                // UPDATE PaidBills, PaidBillsDetails, ORAssigning, DCRTransactionSummary                
                PaidBillsDao.updateOR(connection, id, oldOr, newOr, login.getId(), period);
            } else {
                // UPDATE TransactionIdnex, TransactionDetails, TransactionPaymentDetails, ORAssigning, DCRTransactionSummary
                TransactionIndexDao.updateOR(connection, id, oldOr, newOr, login.getId());
            }
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error Updating OR Number", e.getMessage());           
        }
    }
}
