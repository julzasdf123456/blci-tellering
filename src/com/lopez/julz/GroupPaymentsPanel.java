/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.lopez.julz;

import db.BillsDao;
import db.CollectiblesDao;
import db.DCRSummaryTransactionsDao;
import db.DatabaseConnection;
import db.OCLMonthlyDao;
import db.ORAssigningDao;
import db.PaidBillDetailsDao;
import db.PaidBillsDao;
import db.ServiceAccountsDao;
import helpers.ConfigFileHelpers;
import helpers.Notifiers;
import helpers.ObjectHelpers;
import helpers.PowerBillPrint;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.print.Book;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.math.RoundingMode;
import java.sql.Connection;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.NumberFormatter;
import pojos.Bills;
import pojos.CheckPayments;
import pojos.Collectibles;
import pojos.DCRSummaryTransactions;
import pojos.GroupBillingAccounts;
import pojos.MonthParser;
import pojos.OCLMonthly;
import pojos.ORAssigning;
import pojos.PaidBills;
import pojos.Server;
import pojos.ServiceAccounts;

/**
 *
 * @author Julio Lopez
 */
public class GroupPaymentsPanel extends javax.swing.JPanel {
    public pojos.Login login;
    public String orNumber;
    
    public Server server;
    public String office;
    
    public DatabaseConnection db;
    public Connection connection;
    
    /**
     * Paid bills area
     */
    public ORAssigning currentOr;
    int nextOrNumber = 0;
    
    public String groupid;
    
    boolean isOrLocked = true;
    
    double totalAmountPayable = 0;
    double surchargeAmountPayable = 0;
    String dcrNum = "";
    
    public List<Bills> billsList;
    public DefaultTableModel model;
    public Object colNames[] = {"", "Account No", "Consumer Name", "Kwh Used", "Billing Mo.", "Bill No.", "Amount Due", "2%", "5%", "Surcharge", "Net Amount Due"};
    
    public List<CheckPayments> checkLists;
    Object[] checkColNames = {"Bank", "Check No", "Amount"};
    DefaultTableModel checkModel;

    /**
     * Creates new form GroupPaymentsPanel
     */
    public GroupPaymentsPanel(pojos.Login login, String orNumber) {
        this.login = login;
        this.orNumber = orNumber;
        initComponents();
        
        server = ConfigFileHelpers.getServer();
        office = ConfigFileHelpers.getOffice();
    
        db = new DatabaseConnection();
        connection = db.getDbConnectionFromDatabase(server);
        
        fillBillingMonths();
        fetchOR();
        
        billsList = new ArrayList<>();
        checkLists = new ArrayList<>();
        
        billingMonthDropdown.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Object item = billingMonthDropdown.getSelectedItem();
                getPayablesFromBillingMonth(groupid, item.toString());
                removeSurcharges.setEnabled(true);
            }
        });
        
        addTableRemovePopupMenu(bapaResultsTable);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        bapaName = new javax.swing.JTextField();
        searchGroupAccount = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        billingMonthDropdown = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bapaResultsTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        orNumberField = new javax.swing.JTextField();
        unlockOrNumberBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        NumberFormat format = NumberFormat.getInstance();
        format.setMinimumFractionDigits(2);
        format.setMaximumFractionDigits(2);
        format.setRoundingMode(RoundingMode.HALF_UP);
        NumberFormatter formatter = new NumberFormatter(format);
        formatter.setValueClass(Double.class);
        formatter.setAllowsInvalid(false);
        formatter.setCommitsOnValidEdit(true);
        cashPaymentField = new javax.swing.JFormattedTextField(formatter);
        jScrollPane2 = new javax.swing.JScrollPane();
        checkTable = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        addCheckButton = new javax.swing.JButton();
        totalAmountPaid = new javax.swing.JFormattedTextField();
        jLabel12 = new javax.swing.JLabel();
        transactBtn = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        clearChecksBtn = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        noOfConsumersField = new javax.swing.JTextField();
        netAmountDue = new javax.swing.JFormattedTextField(formatter);
        jLabel17 = new javax.swing.JLabel();
        removeSurcharges = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/mediation_FILL1_wght400_GRAD0_opsz24.png"))); // NOI18N
        jLabel1.setText("BAPA Bills Payment");
        jLabel1.setIconTextGap(10);

        bapaName.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        bapaName.setEnabled(false);

        searchGroupAccount.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        searchGroupAccount.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/travel_explore_FILL0_wght700_GRAD0_opsz20.png"))); // NOI18N
        searchGroupAccount.setText("Search Group Account");
        searchGroupAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchGroupAccountActionPerformed(evt);
            }
        });

        billingMonthDropdown.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        billingMonthDropdown.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Select Billing Month");

        bapaResultsTable.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        bapaResultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(bapaResultsTable);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Payment Config", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12), new java.awt.Color(255, 51, 0))); // NOI18N

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setText("OR Number");

        orNumberField.setFont(new java.awt.Font("Arial", 1, 23)); // NOI18N
        orNumberField.setForeground(new java.awt.Color(204, 0, 0));
        orNumberField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        orNumberField.setEnabled(false);

        unlockOrNumberBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/lock_open_FILL1_wght400_GRAD0_opsz20.png"))); // NOI18N
        unlockOrNumberBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unlockOrNumberBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(orNumberField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(unlockOrNumberBtn)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(4, 4, 4))
                    .addComponent(unlockOrNumberBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(orNumberField, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Payment Options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12), new java.awt.Color(0, 153, 153))); // NOI18N
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel10.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel10.setText("Cash Payment");

        cashPaymentField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        cashPaymentField.setEnabled(false);
        cashPaymentField.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        cashPaymentField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cashPaymentFieldKeyReleased(evt);
            }
        });

        checkTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        checkTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(checkTable);

        jLabel11.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel11.setText("Check Payments");

        addCheckButton.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        addCheckButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/add_FILL1_wght400_GRAD0_opsz20.png"))); // NOI18N
        addCheckButton.setText("Add Check");
        addCheckButton.setEnabled(false);
        addCheckButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCheckButtonActionPerformed(evt);
            }
        });

        totalAmountPaid.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.##"))));
        totalAmountPaid.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        totalAmountPaid.setEnabled(false);
        totalAmountPaid.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel12.setText("Total Amount Paid");

        transactBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        transactBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/check_circle_FILL1_wght400_GRAD0_opsz20.png"))); // NOI18N
        transactBtn.setText("Transact");
        transactBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transactBtnActionPerformed(evt);
            }
        });

        clearChecksBtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        clearChecksBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete_FILL1_wght400_GRAD0_opsz20.png"))); // NOI18N
        clearChecksBtn.setText("Clear Checks");
        clearChecksBtn.setEnabled(false);
        clearChecksBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearChecksBtnActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel13.setText("No. of Consumers");

        noOfConsumersField.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        noOfConsumersField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        noOfConsumersField.setEnabled(false);

        netAmountDue.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        netAmountDue.setEnabled(false);
        netAmountDue.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        netAmountDue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                netAmountDueKeyReleased(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel17.setText("Total Amount Due");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalAmountPaid, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator5)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(46, 46, 46)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(addCheckButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(clearChecksBtn))
                                    .addComponent(cashPaymentField, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(164, 164, 164)
                                .addComponent(transactBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(netAmountDue, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(noOfConsumersField, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(noOfConsumersField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(netAmountDue, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(cashPaymentField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(addCheckButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearChecksBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalAmountPaid, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(transactBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(101, Short.MAX_VALUE))
        );

        removeSurcharges.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        removeSurcharges.setForeground(new java.awt.Color(255, 51, 51));
        removeSurcharges.setText("Remove Surcharges");
        removeSurcharges.setEnabled(false);
        removeSurcharges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSurchargesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 548, Short.MAX_VALUE)
                        .addComponent(bapaName, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchGroupAccount))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(billingMonthDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(removeSurcharges))
                            .addComponent(jScrollPane1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(searchGroupAccount, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(bapaName, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(billingMonthDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeSurcharges))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchGroupAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchGroupAccountActionPerformed
        groupAccountSearch();
    }//GEN-LAST:event_searchGroupAccountActionPerformed

    private void unlockOrNumberBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unlockOrNumberBtnActionPerformed
        if (isOrLocked) {
            orNumberField.setEnabled(true);
            isOrLocked = false;
        } else {
            orNumberField.setEnabled(false);
            nextOrNumber = Integer.valueOf(orNumberField.getText());
            isOrLocked = true;
        }
    }//GEN-LAST:event_unlockOrNumberBtnActionPerformed

    private void cashPaymentFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashPaymentFieldKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            showTransactConfirmation();
        } else {
            totalAmountPaid.setValue(getTotalAmount());
        }
    }//GEN-LAST:event_cashPaymentFieldKeyReleased

    private void transactBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transactBtnActionPerformed
        showTransactConfirmation();
    }//GEN-LAST:event_transactBtnActionPerformed

    private void netAmountDueKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_netAmountDueKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_netAmountDueKeyReleased

    private void clearChecksBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearChecksBtnActionPerformed
        checkLists.clear();
        cashPaymentField.setEnabled(true);
        addCheckButton.setEnabled(true);
        cashPaymentField.setValue(totalAmountPayable);
        totalAmountPaid.setValue(getTotalAmount());
        transactBtn.requestFocus();
        if (checkModel != null) {
            checkModel.getDataVector().removeAllElements();
            checkModel.fireTableDataChanged();
        }
    }//GEN-LAST:event_clearChecksBtnActionPerformed

    private void addCheckButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCheckButtonActionPerformed
        try {
            cashPaymentField.setValue(null);
            
            JDialog checkDialog = new JDialog((JFrame) SwingUtilities.getWindowAncestor(getParent()));
            Dimension size = Toolkit.getDefaultToolkit().getScreenSize();
            int x = (int) size.getWidth();
            int y = (int) size.getHeight();
            checkDialog.setLocation(x/3, y/3);
            checkDialog.setTitle("Add Check");
            
            JPanel mainPanel = new JPanel(new GridLayout(0, 1, 0, 5));
            mainPanel.setBorder(new EmptyBorder(15, 15, 15, 15));
            
            mainPanel.add(new JLabel("Input Check Number"));
            JTextField checkNoField = new JTextField();
            checkNoField.setPreferredSize(new Dimension(400, 36));
            checkNoField.setFont(new Font("Arial", Font.BOLD, 16));  
            mainPanel.add(checkNoField);
            
            mainPanel.add(new JLabel("Input Check Amount"));
            NumberFormat format = NumberFormat.getInstance();
            format.setMinimumFractionDigits(2);
            format.setMaximumFractionDigits(2);
            format.setRoundingMode(RoundingMode.HALF_UP);
            NumberFormatter formatter = new NumberFormatter(format);
            formatter.setValueClass(Double.class);
            formatter.setAllowsInvalid(false);
            formatter.setCommitsOnValidEdit(true);
            JFormattedTextField amountField = new JFormattedTextField(formatter);
            amountField.setPreferredSize(new Dimension(400, 36));
            amountField.setFont(new Font("Arial", Font.BOLD, 16)); 
            amountField.setHorizontalAlignment(JTextField.RIGHT);
            amountField.setValue(totalAmountPayable);
            amountField.addFocusListener(new FocusAdapter() {
                @Override
                public void focusGained(FocusEvent e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            amountField.selectAll();
                        }
                    });                    
                }                
            });
            mainPanel.add(amountField);
            
            mainPanel.add(new JLabel("Input Bank"));
            JTextField checkBank = new JTextField();
            checkBank.setPreferredSize(new Dimension(400, 36));
            checkBank.setFont(new Font("Arial", Font.BOLD, 16));            
            mainPanel.add(checkBank);
            
            JButton saveCheckBtn = new JButton("Add Check");
            saveCheckBtn.setFont(new Font("Arial", Font.PLAIN, 12)); 
            saveCheckBtn.setPreferredSize(new Dimension(100, 32));
            saveCheckBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/check_circle_FILL1_wght400_GRAD0_opsz20.png")));
            mainPanel.add(saveCheckBtn);
            
            
            checkNoField.addKeyListener(new KeyListener() {
                @Override
                public void keyReleased(KeyEvent e) {
                    if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                        amountField.requestFocus();
                    }
                }

                @Override
                public void keyTyped(KeyEvent e) {                    
                }
                @Override
                public void keyPressed(KeyEvent e) {
                }
            });
            
            amountField.addKeyListener(new KeyListener() {
                @Override
                public void keyReleased(KeyEvent e) {
                    if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                        checkBank.requestFocus();
                    }
                }

                @Override
                public void keyTyped(KeyEvent e) {                    
                }
                @Override
                public void keyPressed(KeyEvent e) {
                }
            });
            
            checkBank.addKeyListener(new KeyListener() {
                @Override
                public void keyReleased(KeyEvent e) {
                    if (e.getKeyCode() == KeyEvent.VK_ENTER) {                    
                        checkLists.add(new CheckPayments(
                            ObjectHelpers.generateIDandRandString(),
                            null,
                            null,
                            null,
                            orNumberField.getText(),
                            amountField.getValue().toString(),
                            "Check",
                            checkNoField.getText(),
                            checkBank.getText(),
                            null,
                            login.getId(),
                            ObjectHelpers.getCurrentTimestamp(),
                            ObjectHelpers.getCurrentTimestamp()
                        ));
                    
                        populateCheckTable();
                        checkDialog.dispose();
                        transactBtn.requestFocus();
                        totalAmountPaid.setValue(getTotalAmount());
                    }
                }

                @Override
                public void keyTyped(KeyEvent e) {                    
                }
                @Override
                public void keyPressed(KeyEvent e) {
                }
            });
            
            saveCheckBtn.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {                    
                    checkLists.add(new CheckPayments(
                            ObjectHelpers.generateIDandRandString(),
                            null,
                            null,
                            null,
                            orNumberField.getText(),
                            amountField.getValue().toString(),
                            "Check",
                            checkNoField.getText(),
                            checkBank.getText(),
                            null,
                            login.getId(),
                            ObjectHelpers.getCurrentTimestamp(),
                            ObjectHelpers.getCurrentTimestamp()
                        ));
                    
                        populateCheckTable();
                        checkDialog.dispose();
                        transactBtn.requestFocus();
                        totalAmountPaid.setValue(getTotalAmount());
                }
            });
            
            checkDialog.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(WindowEvent e) {
//                    if(getCashRemainFromCheck() > 0) {
//                        cashPaymentField.setValue(getCashRemainFromCheck());
//                    } 
                }

                @Override
                public void windowClosed(WindowEvent e) {
//                    if(getCashRemainFromCheck() > 0) {
//                        cashPaymentField.setValue(getCashRemainFromCheck());
//                    } 
                    cashPaymentField.setEnabled(false);
                    addCheckButton.setEnabled(false);
                    transactBtn.requestFocus();
                }
            });
            
            checkDialog.add(mainPanel);
            checkDialog.pack();
            checkDialog.setVisible(true);
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error Adding Check Payment", e.getMessage());
        }             
    }//GEN-LAST:event_addCheckButtonActionPerformed

    private void removeSurchargesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSurchargesActionPerformed
        try {
            if (JOptionPane.showConfirmDialog(null, "Are you sure you want to remove surcharges on this group?", "Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
                int row = model.getRowCount();
                surchargeAmountPayable = 0;
                for (int i=0; i<row; i++) {
                    model.setValueAt("0", i, 9);
                    model.setValueAt(model.getValueAt(i, 6).toString(), i, 10);
                    billsList.get(i).setIsUnlockedForPayment("0");
                }
                netAmountDue.setValue(getOverAllPayable());
                cashPaymentField.setValue(getOverAllPayable());
                removeSurcharges.setEnabled(false);
            } 
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_removeSurchargesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCheckButton;
    private javax.swing.JTextField bapaName;
    private javax.swing.JTable bapaResultsTable;
    private javax.swing.JComboBox<String> billingMonthDropdown;
    private javax.swing.JFormattedTextField cashPaymentField;
    private javax.swing.JTable checkTable;
    private javax.swing.JButton clearChecksBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JFormattedTextField netAmountDue;
    private javax.swing.JTextField noOfConsumersField;
    private javax.swing.JTextField orNumberField;
    private javax.swing.JButton removeSurcharges;
    private javax.swing.JButton searchGroupAccount;
    private javax.swing.JFormattedTextField totalAmountPaid;
    private javax.swing.JButton transactBtn;
    private javax.swing.JButton unlockOrNumberBtn;
    // End of variables declaration//GEN-END:variables

    public void fillBillingMonths() {
        try {
            String[] billMonths = ObjectHelpers.getPreviousMonths(15);
            for (int i=0; i<billMonths.length; i++) {
                billingMonthDropdown.addItem(new MonthParser(billMonths[i], ObjectHelpers.formatReadableDate(billMonths[i])).toString());
            }
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error filling billing months", e.getMessage());
        }
    }
    
    public double getTotalAmount() {
        double cash = Double.valueOf(cashPaymentField.getValue() != null ? cashPaymentField.getValue().toString() : "0");
        double check = getTotalCheckPayments();
        return cash + check;
    }
    
    public double getTotalCheckPayments() {
        try {
             double ttl = 0;
             for(int i=0; i<checkLists.size(); i++) {
                ttl += Double.valueOf(checkLists.get(i).getAmount());
             }
             return ttl;
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }
    
    public void populateCheckTable() {
        try {
            clearChecksBtn.setEnabled(true);
            if (checkModel != null) {
                checkModel.getDataVector().removeAllElements();
                checkModel.fireTableDataChanged();
            }
            
            int checklistsize = checkLists.size();
            Object[][] data = new Object[checklistsize][checkColNames.length];
            for (int i=0; i<checklistsize; i++) {
                data[i][0] = checkLists.get(i).getBank();
                data[i][1] = checkLists.get(i).getCheckNo();
                data[i][2] = ObjectHelpers.roundTwo(checkLists.get(i).getAmount());
            }
            
            // DISPLAY TO TABLE
            checkModel = new DefaultTableModel(data, checkColNames);
            DefaultTableCellRenderer rightRendererBlue = new DefaultTableCellRenderer();
            rightRendererBlue.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererBlue.setFont(new Font("Arial", Font.BOLD, 14));
            rightRendererBlue.setForeground(Color.BLUE);

            checkTable.setModel(checkModel);
            checkTable.setRowHeight(25);
            checkTable.getColumnModel().getColumn(2).setCellRenderer(rightRendererBlue);
            checkTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
            
            transactBtn.requestFocus();
            
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error Getting Bills", e.getMessage());
        }
    }
    
    public void groupAccountSearch() {
        try {
            JDialog advancedSearchDialog = new JDialog((JFrame) SwingUtilities.getWindowAncestor(getParent()));
            Dimension size = Toolkit.getDefaultToolkit().getScreenSize();
            int x = (int) size.getWidth();
            int y = (int) size.getHeight();
            advancedSearchDialog.setLocation(x/5, y/5);
            advancedSearchDialog.setTitle("Search Group Account");
            
            JPanel mainPanel = new JPanel();
    
            JTextField searchField = new javax.swing.JTextField();
            JButton searchBtn = new javax.swing.JButton();
            JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
            JTable resultsTable = new javax.swing.JTable();
            
            final String searchCols[] = {"Group ID", "Group Name"};

            searchField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

            searchBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/travel_explore_FILL0_wght700_GRAD0_opsz20.png"))); // NOI18N
            
            // SEARCH
            searchField.addKeyListener(new KeyListener() {
                @Override
                public void keyTyped(KeyEvent e) {
                    
                }

                @Override
                public void keyPressed(KeyEvent e) {
                    
                }

                @Override
                public void keyReleased(KeyEvent e) {
                    DefaultTableModel searchTableModel;
                    List<GroupBillingAccounts> results = ServiceAccountsDao.searchGroupBilling(connection, searchField.getText());
                        int searchSize = results.size();
                        Object[][] searchData = new Object[searchSize][searchCols.length];
                        for (int i=0; i<searchSize; i++) {
                            searchData[i][0] = results.get(i).getId();
                            searchData[i][1] = results.get(i).getGroupName();
                        }
                        
                        searchTableModel = new DefaultTableModel(searchData, searchCols) {
                            @Override
                            public boolean isCellEditable(int row, int column) {
                                return false;
                            }                            
                        };
                    
                        resultsTable.setModel(searchTableModel);
                        resultsTable.getColumnModel().getColumn(0).setWidth(110);
                        resultsTable.getColumnModel().getColumn(0).setMaxWidth(110);
                        resultsTable.getColumnModel().getColumn(0).setMinWidth(110);
                        resultsTable.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
                }
            });
            
            resultsTable.setRowHeight(28);
            resultsTable.setFont(new Font("Arial", Font.PLAIN, 12));
            
            jScrollPane1.setViewportView(resultsTable);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(mainPanel);
            mainPanel.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(126, 126, 126)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(searchBtn)
                    .addContainerGap(143, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1)
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            
            resultsTable.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    if (e.getClickCount() == 2) {
                        String groupName = resultsTable.getModel().getValueAt(resultsTable.getSelectedRow(), 1).toString();
                        groupid = resultsTable.getModel().getValueAt(resultsTable.getSelectedRow(), 0).toString();
                        bapaName.setText(groupName);
                        billingMonthDropdown.setEnabled(true);
                        addCheckButton.setEnabled(true);
                        clearChecksBtn.setEnabled(true);
                        getPayablesFromBillingMonth(groupid, billingMonthDropdown.getSelectedItem().toString());
                        advancedSearchDialog.dispose();
                        removeSurcharges.setEnabled(true);
                    }
                }                
            });
            
            advancedSearchDialog.add(mainPanel);
            advancedSearchDialog.pack();
            advancedSearchDialog.setVisible(true);
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error Group Account Search", e.getMessage());
        }
    }
    
    public void fetchOR() {
        currentOr = ORAssigningDao.getCurrentOR(connection, login.getId());
        
        if (currentOr != null) {
            nextOrNumber = Integer.parseInt(currentOr.getORumber()) + 1;
            orNumberField.setText(nextOrNumber + "");
        } else {
            nextOrNumber = Integer.parseInt(orNumber);
            orNumberField.setText(nextOrNumber + "");
        }            
    }
    
    public double getOverAllPayable() {
        return totalAmountPayable + surchargeAmountPayable;
    }
    
    public void getPayablesFromBillingMonth(String groupId, String period) {
        try {
            // reset
            totalAmountPayable = 0;
            surchargeAmountPayable = 0;
            
            noOfConsumersField.setText("");
            netAmountDue.setValue(null);
            cashPaymentField.setValue(null);            
            
            billsList = PaidBillsDao.getBillsFromGroup(connection, groupId, period);
            int conSize = billsList.size();
            Object data[][] = new Object[conSize][colNames.length];
            for (int i=0; i<conSize; i++) {
                double surcharge = Double.valueOf(ObjectHelpers.roundTwoNoComma(BillsDao.getSurcharge(billsList.get(i)) + ""));
                data[i][0] = (i+1) + "";
                data[i][1] = billsList.get(i).getDemandPreviousKwh();
                data[i][2] = billsList.get(i).getNotes();
                data[i][3] = billsList.get(i).getKwhUsed();
                data[i][4] = billsList.get(i).getServicePeriod();
                data[i][5] = billsList.get(i).getBillNumber();
                data[i][6] = ObjectHelpers.roundTwo(billsList.get(i).getNetAmount());
                data[i][7] = ObjectHelpers.roundTwo(billsList.get(i).getEvat2Percent());
                data[i][8] = ObjectHelpers.roundTwo(billsList.get(i).getEvat5Percent());
                data[i][9] = ObjectHelpers.roundTwo(surcharge + "");
                data[i][10] = ObjectHelpers.roundTwo((Double.valueOf(billsList.get(i).getNetAmount()) + surcharge) + "");
                totalAmountPayable += Double.valueOf(billsList.get(i).getNetAmount());
                surchargeAmountPayable += surcharge;
                billsList.get(i).setIsUnlockedForPayment(surcharge + ""); // SUDLANAN SURCHARGE
            }
            
            model = new DefaultTableModel(data, colNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
            
            DefaultTableCellRenderer rightRendererRed = new DefaultTableCellRenderer();
            rightRendererRed.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererRed.setForeground(Color.red);
            
            DefaultTableCellRenderer rightRendererBlue = new DefaultTableCellRenderer();
            rightRendererBlue.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererBlue.setForeground(Color.BLUE);
            
            DefaultTableCellRenderer rightRendererGreen = new DefaultTableCellRenderer();
            rightRendererGreen.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererGreen.setForeground(Color.decode("#00675b"));
            
            bapaResultsTable.setModel(model);
            bapaResultsTable.setRowHeight(26);
            bapaResultsTable.getColumnModel().getColumn(0).setMaxWidth(25);
            bapaResultsTable.getColumnModel().getColumn(1).setMaxWidth(130);
            bapaResultsTable.getColumnModel().getColumn(1).setMinWidth(120);
            bapaResultsTable.getColumnModel().getColumn(3).setMaxWidth(190);
            bapaResultsTable.getColumnModel().getColumn(4).setMaxWidth(90);
            bapaResultsTable.getColumnModel().getColumn(5).setMaxWidth(190);
            bapaResultsTable.getColumnModel().getColumn(6).setMaxWidth(220);
            bapaResultsTable.getColumnModel().getColumn(7).setMaxWidth(110);
            bapaResultsTable.getColumnModel().getColumn(8).setMaxWidth(110);
            bapaResultsTable.getColumnModel().getColumn(8).setMaxWidth(110);
            bapaResultsTable.getColumnModel().getColumn(7).setCellRenderer(rightRendererGreen);
            bapaResultsTable.getColumnModel().getColumn(8).setCellRenderer(rightRendererRed);
            
            /**
             * FETCH DETAILS
             */
            noOfConsumersField.setText(conSize + "");
            netAmountDue.setValue(getOverAllPayable());
            cashPaymentField.setEnabled(true);
            cashPaymentField.setValue(getOverAllPayable());
            cashPaymentField.requestFocus();
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    cashPaymentField.selectAll();
                }
            });  
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error getting payables", e.getMessage());
        }
    }
    
    public void addTableRemovePopupMenu(JTable table) {
        try {
            JPopupMenu popupMenu = new JPopupMenu();
            JMenuItem remove = new JMenuItem("Remove Account from Queue");
            JMenuItem removeSurcharge = new JMenuItem("Remove Surcharge");
            
            remove.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    int index = table.getSelectedRow();
                    Bills bill = billsList.get(index);
                    billsList.remove(index);
                    ((DefaultTableModel)table.getModel()).removeRow(index);
                    
                    double amnt = Double.valueOf(bill.getNetAmount());
                    
                    totalAmountPayable = totalAmountPayable-amnt;
                    
                    double surchargeAdded = bill.getIsUnlockedForPayment() != null ? Double.valueOf(bill.getIsUnlockedForPayment()) : 0;
                    surchargeAmountPayable = surchargeAmountPayable - surchargeAdded;
                    //remove surcharge from queue
                    bill.setIsUnlockedForPayment("0");
                    
                    totalAmountPaid.setValue(getOverAllPayable());  
                    netAmountDue.setValue(getOverAllPayable());
                    cashPaymentField.setValue(getOverAllPayable());
                    noOfConsumersField.setText(billsList.size() + "");
                }
            });
            
            removeSurcharge.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    int index = table.getSelectedRow();
                    //deduct from total
                    double surchargeAdded = billsList.get(index).getIsUnlockedForPayment() != null ? Double.valueOf(billsList.get(index).getIsUnlockedForPayment()) : 0;
                    surchargeAmountPayable = surchargeAmountPayable - surchargeAdded;
                    //remove surcharge from queue
                    billsList.get(index).setIsUnlockedForPayment("0");
                    
                    // UPDATE UI
                    netAmountDue.setValue(getOverAllPayable());
                    cashPaymentField.setValue(getOverAllPayable());
                    cashPaymentField.requestFocus();
                    totalAmountPaid.setValue(getOverAllPayable()); 
                    table.getModel().setValueAt("0", index, 9);
                    table.getModel().setValueAt(table.getValueAt(index, 6).toString(), index, 10);
                }
            });
            
            popupMenu.addPopupMenuListener(new PopupMenuListener() {
                @Override
                public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            int rowAtPoint = table.rowAtPoint(SwingUtilities.convertPoint(popupMenu, new Point(0, 0), table));
                            if (rowAtPoint > -1) {
                                table.setRowSelectionInterval(rowAtPoint, rowAtPoint);
                            }
                        }
                    });
                }

                @Override
                public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
                    // TODO Auto-generated method stub

                }

                @Override
                public void popupMenuCanceled(PopupMenuEvent e) {
                    // TODO Auto-generated method stub

                }
            });
            popupMenu.add(remove);
            popupMenu.add(removeSurcharge);
            table.setComponentPopupMenu(popupMenu);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void showTransactConfirmation() {
        try {
            // SHOW CONFIRMATION
            JDialog confirmationDialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(getParent()));
            Dimension size = Toolkit.getDefaultToolkit().getScreenSize();
            int x = (int) size.getWidth();
            int y = (int) size.getHeight();
            confirmationDialog.setLocation(x/3, y/3);
            confirmationDialog.setTitle("Payment Confirmation");

            JPanel mainPanel = new JPanel(new GridLayout(0, 2, 5, 5));
            mainPanel.setBorder(new EmptyBorder(15, 15, 15, 15));

            // CASH AMOUNT
            JLabel cashAmntLabel = new JLabel("CASH AMOUNT");
            cashAmntLabel.setFont(new Font("Arial", Font.BOLD, 16));
            mainPanel.add(cashAmntLabel);

            NumberFormat format = NumberFormat.getInstance();
            format.setMinimumFractionDigits(2);
            format.setMaximumFractionDigits(2);
            format.setRoundingMode(RoundingMode.HALF_UP);
            NumberFormatter formatter = new NumberFormatter(format);
            formatter.setValueClass(Double.class);
            formatter.setAllowsInvalid(false);
            formatter.setCommitsOnValidEdit(true);

            JFormattedTextField cashAmountField = new JFormattedTextField(formatter);
            cashAmountField.setPreferredSize(new Dimension(250, 36));
            cashAmountField.setFont(new Font("Arial", Font.BOLD, 19)); 
            cashAmountField.setHorizontalAlignment(JTextField.RIGHT);
            cashAmountField.setValue(cashPaymentField.getValue());
            cashAmountField.addFocusListener(new FocusAdapter() {
                @Override
                public void focusGained(FocusEvent e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            cashAmountField.selectAll();
                        }
                    });                    
                }                
            });                

            mainPanel.add(cashAmountField);
            
            double checkAmountQ = 0;
            if (checkLists.size() > 0) {
                for(int j=0; j<checkLists.size(); j++) {
                    CheckPayments chk = checkLists.get(j);
                    checkAmountQ += chk.getAmount() != null ? Double.valueOf(chk.getAmount()) : 0;
                }                                            
            }

            // CHECK AMOUNT
            JLabel checkAmount = new JLabel("CHECK AMOUNT");
            checkAmount.setFont(new Font("Arial", Font.BOLD, 16));
            mainPanel.add(checkAmount);

            JFormattedTextField totalCheckAmountField = new JFormattedTextField(formatter);
            totalCheckAmountField.setPreferredSize(new Dimension(250, 36));
            totalCheckAmountField.setFont(new Font("Arial", Font.BOLD, 19)); 
            totalCheckAmountField.setHorizontalAlignment(JTextField.RIGHT);
            totalCheckAmountField.setValue(checkAmountQ);
            totalCheckAmountField.setEnabled(false);
            mainPanel.add(totalCheckAmountField);

            // TOTAL AMOUNT PAID
            JLabel totalAmountPaidLabel = new JLabel("TOTAL AMOUNT PAID");
            totalAmountPaidLabel.setFont(new Font("Arial", Font.BOLD, 16));
            mainPanel.add(totalAmountPaidLabel);                

            JFormattedTextField totalAmountPaidField = new JFormattedTextField(formatter);
            totalAmountPaidField.setPreferredSize(new Dimension(250, 36));
            totalAmountPaidField.setFont(new Font("Arial", Font.BOLD, 19)); 
            totalAmountPaidField.setHorizontalAlignment(JTextField.RIGHT);
            totalAmountPaidField.setValue(getTotalAmount());
            totalAmountPaidField.setEnabled(false);
            mainPanel.add(totalAmountPaidField);

            // TOTAL AMOUNT DUE
            JLabel totalAmountDueLabel = new JLabel("TOTAL AMOUNT DUE");
            totalAmountDueLabel.setFont(new Font("Arial", Font.BOLD, 16));
            mainPanel.add(totalAmountDueLabel);                

            JFormattedTextField totalAmountDueField = new JFormattedTextField(formatter);
            totalAmountDueField.setPreferredSize(new Dimension(250, 36));
            totalAmountDueField.setFont(new Font("Arial", Font.BOLD, 19)); 
            totalAmountDueField.setForeground(Color.red);
            totalAmountDueField.setHorizontalAlignment(JTextField.RIGHT);
            totalAmountDueField.setValue(getOverAllPayable());
            mainPanel.add(totalAmountDueField);

            // TOTAL AMOUNT DUE
            JLabel changeLabel = new JLabel("CHANGE");
            changeLabel.setFont(new Font("Arial", Font.BOLD, 16));
            mainPanel.add(changeLabel);                

            JFormattedTextField changeField = new JFormattedTextField(formatter);
            changeField.setPreferredSize(new Dimension(250, 36));
            changeField.setFont(new Font("Arial", Font.BOLD, 19)); 
            changeField.setForeground(Color.BLUE);
            changeField.setHorizontalAlignment(JTextField.RIGHT);
            changeField.setValue(getTotalAmount() - totalAmountPayable);
            mainPanel.add(changeField);

            cashAmountField.addKeyListener(new KeyListener() {
                @Override
                public void keyTyped(KeyEvent e) {
                    
                }
                @Override
                public void keyPressed(KeyEvent e) {
                    try {
                        if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                            transact();
                            confirmationDialog.dispose();
                        } else {
                            cashAmountField.commitEdit();
                            cashPaymentField.setValue(cashAmountField.getValue());
                            totalAmountPaid.setValue(getTotalAmount());
                            totalAmountPaidField.setValue(getTotalAmount());
                            changeField.setValue(getTotalAmount() - totalAmountPayable);  
                        }
                    } catch (ParseException ex) {
                        Logger.getLogger(PowerBillsPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                @Override
                public void keyReleased(KeyEvent e) {
                    
                }
            });

            JButton transactButton = new JButton("CONFIRM", new javax.swing.ImageIcon(getClass().getResource("/icons/check_circle_FILL1_wght400_GRAD0_opsz20.png")));
            transactButton.setFont(new Font("Arial", Font.BOLD, 18)); 
            transactButton.setPreferredSize(new Dimension(100, 40));
            mainPanel.add(new JLabel());
            mainPanel.add(transactButton);
            
            transactButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    transact();
                    confirmationDialog.dispose();
                }
            });

            confirmationDialog.add(mainPanel);
            confirmationDialog.pack();
            confirmationDialog.setVisible(true);
            
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error Showing Payment Confirmation", e.getMessage());
        }
    }
    
    public double getCashRemainFromCheck() {
        double check = getTotalCheckPayments();
        return (totalAmountPayable) - check;
    }
    
    public void transact() {
        try {
            if (getTotalAmount() >= totalAmountPayable) {
                String paymentUsed = "";
                if (cashPaymentField.getValue() != null && checkLists.size() > 0) {
                    paymentUsed = "Cash and Check";
                } else if (cashPaymentField.getValue() == null && checkLists.size() > 0) {
                    paymentUsed = "Check";
                } else {
                    paymentUsed = "Cash";
                }
                
                int consSize = billsList.size();
                double cashRemain = getCashRemainFromCheck();
                dcrNum = "GROUP-" + ObjectHelpers.getTimeInMillis();
                for (int i=0; i<consSize; i++) {
                    Bills bill = BillsDao.getOneById(connection, billsList.get(i).getId());
                    if (bill != null) {
                        ServiceAccounts account = ServiceAccountsDao.getOneById(connection, bill.getAccountNumber());
                        double ttl = Double.valueOf(ObjectHelpers.getTotals(Double.valueOf(bill.getNetAmount()), Double.valueOf(billsList.get(i).getIsUnlockedForPayment())));
                        PaidBills paidBill = new PaidBills(
                                ObjectHelpers.generateIDandRandString(),
                                bill.getBillNumber(),
                                bill.getAccountNumber(),
                                bill.getServicePeriod(),
                                nextOrNumber + "",
                                ObjectHelpers.getSqlDate(),
                                dcrNum,
                                bill.getKwhUsed(),
                                login.getId(),
                                office,
                                ObjectHelpers.getSqlDate(),
                                ObjectHelpers.getSqlTime(),
                                ObjectHelpers.roundTwoNoComma(billsList.get(i).getIsUnlockedForPayment()),
                                bill.getEvat2Percent(),
                                bill.getEvat5Percent(),
                                bill.getAdditionalCharges(),
                                null,
                                ObjectHelpers.roundTwoNoComma(ttl + ""),
                                "MONTHLY BILL",
                                bill.getId(),
                                login.getId(),
                                ObjectHelpers.getCurrentTimestamp(),
                                ObjectHelpers.getCurrentTimestamp(),
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                paymentUsed
                        );
                        
                        PaidBillsDao.insert(connection, paidBill);
                        
                        /*
                         * UPDATE OCL TO PAID
                         */
                        if (bill.getAdditionalCharges() != null) {
                           OCLMonthly ocl = OCLMonthlyDao.getOne(connection, bill.getServicePeriod(), bill.getAccountNumber());
                           if (ocl != null) {
                               // UPDATE OCL
                               OCLMonthlyDao.setOclPaid(connection, ocl.getId());

                               // DEDUCT BALANCE
                               Collectibles collectible = CollectiblesDao.getOne(connection, bill.getAccountNumber());
                               if (collectible != null) {
                                   double newBal = Double.valueOf(collectible.getBalance()) - Double.valueOf(ocl.getAmount());
                                   CollectiblesDao.updateCollectible(connection, bill.getAccountNumber(), ObjectHelpers.roundTwoNoComma(newBal + ""));
                               }                            
                           }
                        }
                        
                        /**
                         * sAVE DCR
                         */
                        // DCR FOR SURCHARGE
                        DCRSummaryTransactions dcr = new DCRSummaryTransactions(
                                ObjectHelpers.generateIDandRandString(),
                                "312-450-00",
                                bill.getServicePeriod(),
                                null,
                                paidBill.getSurcharge() != null ? paidBill.getSurcharge() : "0",
                                ObjectHelpers.getSqlDate(),
                                ObjectHelpers.getSqlTime(),
                                login.getId(),
                                null,
                                null,
                                ObjectHelpers.getCurrentTimestamp(),
                                ObjectHelpers.getCurrentTimestamp(),
                                orNumberField.getText(),
                                "BOTH",
                                office,
                                account.getId()
                        );
                        DCRSummaryTransactionsDao.insert(connection, dcr);
                        
                        /**
                        * =======================================
                        * SAVE DCR FOR PRE PAYMENTS
                        * =======================================
                        */
                        if(bill.getDeductedDeposit()!= null) {
                            DCRSummaryTransactions dcrDeduct = new DCRSummaryTransactions(
                                    ObjectHelpers.generateIDandRandString(),
                                    "223-235-20",
                                    bill.getServicePeriod(),
                                    null,
                                    bill.getDeductedDeposit() != null ? ("-" + bill.getDeductedDeposit()) : "0",
                                    ObjectHelpers.getSqlDate(),
                                    ObjectHelpers.getSqlTime(),
                                    login.getId(),
                                    null,
                                    null,
                                    ObjectHelpers.getCurrentTimestamp(),
                                    ObjectHelpers.getCurrentTimestamp(),
                                    orNumberField.getText(),
                                    "BOTH",
                                    office,
                                    account.getId()
                            );
                            DCRSummaryTransactionsDao.insert(connection, dcrDeduct);
                        }
                        
                        saveDCR(bill, account);
                        
                        /**
                        * FIX DCR
                        */
                        fixDCR(login.getId(), account.getId(), nextOrNumber + "", ObjectHelpers.getSqlDate(), paidBill, account, bill.getServicePeriod());
                        
                        /**
                        * SAVE PAID BILL DETAILS
                        */
                        if (cashPaymentField.getValue() != null) {
                            if (paymentUsed.equals("Cash and Check")) {
                                if (cashRemain > 0) {
                                    CheckPayments details = new CheckPayments(
                                            ObjectHelpers.generateIDandRandString(),
                                            bill.getAccountNumber(),
                                            bill.getServicePeriod(),
                                            null,
                                            nextOrNumber +"",
                                            ObjectHelpers.roundTwo((cashRemain/consSize) +""),
                                            "Cash",
                                            null,
                                            null, 
                                            null,
                                            login.getId(),
                                            ObjectHelpers.getCurrentTimestamp(),
                                            ObjectHelpers.getCurrentTimestamp()
                                    );
                                    PaidBillDetailsDao.insert(connection, details);

                                    if (i==0) {
                                        if (checkLists.size() > 0) {
                                            for(int x=0; x<checkLists.size(); x++) {
                                                CheckPayments chk = checkLists.get(x);
                                                chk.setId(ObjectHelpers.generateIDandRandString());
                                                chk.setServicePeriod(bill.getServicePeriod());
                                                chk.setAccountNumber(paidBill.getAccountNumber());
                                                chk.setORNumber(nextOrNumber +"");
                                                chk.setAmount(chk.getAmount() + "");
                                                PaidBillDetailsDao.insert(connection, chk);
                                            }                                            
                                        }
                                    }                                    
                                }                            
                            } else if (paymentUsed.equals("Cash")) {
                                CheckPayments details = new CheckPayments(
                                        ObjectHelpers.generateIDandRandString(),
                                        bill.getAccountNumber(),
                                        bill.getServicePeriod(),
                                        null,
                                        nextOrNumber +"",
                                        ObjectHelpers.roundTwoNoComma(Double.valueOf(paidBill.getNetAmount()) + ""),
                                        "Cash",
                                        null,
                                        null, 
                                        null,
                                        login.getId(),
                                        ObjectHelpers.getCurrentTimestamp(),
                                        ObjectHelpers.getCurrentTimestamp()
                                );
                                PaidBillDetailsDao.insert(connection, details);
                            }           
                        } else {
                            if (paymentUsed.equals("Check")) { 
                                if (i==0) {
                                    if (checkLists.size() > 0) {
                                        for(int x=0; x<checkLists.size(); x++) {
                                            CheckPayments chk = checkLists.get(x);
                                            chk.setId(ObjectHelpers.generateIDandRandString());
                                            chk.setServicePeriod(bill.getServicePeriod());
                                            chk.setAccountNumber(paidBill.getAccountNumber());
                                            chk.setORNumber(nextOrNumber +"");
                                            chk.setAmount(chk.getAmount() + "");
                                            PaidBillDetailsDao.insert(connection, chk);
                                        }                                            
                                    }
                                }   
                            }   
                        }
//                        if (paymentUsed=="Cash") {
//                            CheckPayments details = new CheckPayments(
//                                    ObjectHelpers.generateIDandRandString(),
//                                    bill.getAccountNumber(),
//                                    bill.getServicePeriod(),
//                                    null,
//                                    nextOrNumber + "",
//                                    paidBill.getNetAmount(),
//                                    "Cash",
//                                    null,
//                                    null, 
//                                    null,
//                                    login.getId(),
//                                    ObjectHelpers.getCurrentTimestamp(),
//                                    ObjectHelpers.getCurrentTimestamp()
//                            );
//                            PaidBillDetailsDao.insert(connection, details);
//                        } else if (paymentUsed == "Cash and Check") {
//                        
//                        }else { // CHECK
                            // GET CHECK DETAILS
//                            if (checkLists.size() > 0) {                                
//                                CheckPayments details = new CheckPayments(
//                                        ObjectHelpers.generateIDandRandString(),
//                                        bill.getAccountNumber(),
//                                        bill.getServicePeriod(),
//                                        null,
//                                        nextOrNumber + "",
//                                        paidBill.getNetAmount(),
//                                        "Check",
//                                        checkLists.get(0).getCheckNo(),
//                                        checkLists.get(0).getBank(), 
//                                        null,
//                                        login.getId(),
//                                        ObjectHelpers.getCurrentTimestamp(),
//                                        ObjectHelpers.getCurrentTimestamp()
//                                );
//                                PaidBillDetailsDao.insert(connection, details);
//                            }                                
//                        }                                                      

                       /**
                        * SAVE OR ASSIGNING
                        */
                       ORAssigning orNew = new ORAssigning(
                               ObjectHelpers.generateIDandRandString(),
                               nextOrNumber + "",
                               login.getId(),
                               ObjectHelpers.getSqlDate(),
                               null,
                               ObjectHelpers.getSqlTime(),
                               office,
                               ObjectHelpers.getCurrentTimestamp(),
                               ObjectHelpers.getCurrentTimestamp()
                       );
                       ORAssigningDao.insert(connection, orNew);
                       
                       /**
                        * INCREMENT OR
                        */
                       nextOrNumber += 1;
                    }                        
                }
                
                // RESET
                fetchOR();
                totalAmountPayable = 0;
                surchargeAmountPayable = 0;

                noOfConsumersField.setText("");
                netAmountDue.setValue(null);
                cashPaymentField.setValue(null);
                if (model != null) {
                    model.getDataVector().removeAllElements();
                    model.fireTableDataChanged();
                }
                if (checkModel != null) {
                    checkModel.getDataVector().removeAllElements();
                    checkModel.fireTableDataChanged();
                }
                addCheckButton.setEnabled(false);
                clearChecksBtn.setEnabled(false);
                checkLists.clear();
                bapaName.setText("");
                cashPaymentField.setEnabled(false);
                billingMonthDropdown.setSelectedIndex(0);
                                
                /**
                 * =======================
                 * PRINT HERE IDIOT
                 * =======================
                 */
                print(dcrNum);
                
                dcrNum = "";
            } else {
                Notifiers.showErrorMessage("Insufficient Amount", "Insufficient Amount Provided");
            }
        } catch (Exception e) {
             e.printStackTrace();
            Notifiers.showErrorMessage("Error Saving Transaction", e.getMessage());
        }
    }
    
    public void saveDCR(Bills bill, ServiceAccounts activeAccount) {
        if (activeAccount.getForDistribution()!= null && activeAccount.getForDistribution().equals("Yes")) {
            // FOR DISTRIBUTION ACCOUNTS
            if (activeAccount.getDistributionAccountCode() != null) {
                DCRSummaryTransactions dcr = new DCRSummaryTransactions(
                        ObjectHelpers.generateIDandRandString(),
                        activeAccount.getDistributionAccountCode(),
                        bill.getServicePeriod(),
                        null,
                        DCRSummaryTransactionsDao.getARConsumers(bill) + "",
                        ObjectHelpers.getSqlDate(),
                        ObjectHelpers.getSqlTime(),
                        login.getId(),
                        null,
                        null,
                        ObjectHelpers.getCurrentTimestamp(),
                        ObjectHelpers.getCurrentTimestamp(),
                        nextOrNumber+"",
                        "BOTH",
                        office,
                        activeAccount.getId()
                );
                DCRSummaryTransactionsDao.insert(connection, dcr);
            }
        } else {
            // FOR NORMAL ACCOUNTS
            // GET AR CONSUMERS
            DCRSummaryTransactions dcr = new DCRSummaryTransactions(
                        ObjectHelpers.generateIDandRandString(),
                        DCRSummaryTransactionsDao.getARConsumersCode(activeAccount.getTownCode()),
                        bill.getServicePeriod(),
                        null,
                        DCRSummaryTransactionsDao.getARConsumers(bill) + "",
                        ObjectHelpers.getSqlDate(),
                        ObjectHelpers.getSqlTime(),
                        login.getId(),
                        null,
                        null,
                        ObjectHelpers.getCurrentTimestamp(),
                        ObjectHelpers.getCurrentTimestamp(),
                        nextOrNumber+"",
                        "COLLECTION",
                        office,
                        activeAccount.getId());
            DCRSummaryTransactionsDao.insert(connection, dcr);

            // GET RPT FOR DCR
            dcr = new DCRSummaryTransactions(
                        ObjectHelpers.generateIDandRandString(),
                        DCRSummaryTransactionsDao.getARConsumersRPTCode(activeAccount.getTownCode()),
                        bill.getServicePeriod(),
                        null,
                        bill.getRealPropertyTax(),
                        ObjectHelpers.getSqlDate(),
                        ObjectHelpers.getSqlTime(),
                        login.getId(),
                        null,
                        null,
                        ObjectHelpers.getCurrentTimestamp(),
                        ObjectHelpers.getCurrentTimestamp(),
                        nextOrNumber+"",
                        "COLLECTION",
                        office,
                        activeAccount.getId());
            DCRSummaryTransactionsDao.insert(connection, dcr);

            // GET RPT FOR SALES
            dcr = new DCRSummaryTransactions(
                        ObjectHelpers.generateIDandRandString(),
                        "140-143-30",
                        bill.getServicePeriod(),
                        null,
                        bill.getRealPropertyTax(),
                        ObjectHelpers.getSqlDate(),
                        ObjectHelpers.getSqlTime(),
                        login.getId(),
                        null,
                        null,
                        ObjectHelpers.getCurrentTimestamp(),
                        ObjectHelpers.getCurrentTimestamp(),
                        nextOrNumber+"",
                        "SALES",
                        office,
                        activeAccount.getId());
            DCRSummaryTransactionsDao.insert(connection, dcr);
            
            // GET FRANCHISE TAX FOR DCR
            dcr = new DCRSummaryTransactions(
                        ObjectHelpers.generateIDandRandString(),
                        DCRSummaryTransactionsDao.getARConsumersRPTCode(activeAccount.getTownCode()),
                        bill.getServicePeriod(),
                        null,
                        bill.getFranchiseTax(),
                        ObjectHelpers.getSqlDate(),
                        ObjectHelpers.getSqlTime(),
                        login.getId(),
                        null,
                        null,
                        ObjectHelpers.getCurrentTimestamp(),
                        ObjectHelpers.getCurrentTimestamp(),
                        orNumberField.getText(),
                        "COLLECTION",
                        office,
                        activeAccount.getId());
            DCRSummaryTransactionsDao.insert(connection, dcr);

            // GET FRANCHISE TAX FOR SALES
            dcr = new DCRSummaryTransactions(
                        ObjectHelpers.generateIDandRandString(),
                        "140-143-30",
                        bill.getServicePeriod(),
                        null,
                        bill.getFranchiseTax(),
                        ObjectHelpers.getSqlDate(),
                        ObjectHelpers.getSqlTime(),
                        login.getId(),
                        null,
                        null,
                        ObjectHelpers.getCurrentTimestamp(),
                        ObjectHelpers.getCurrentTimestamp(),
                        orNumberField.getText(),
                        "SALES",
                        office,
                        activeAccount.getId());
            DCRSummaryTransactionsDao.insert(connection, dcr);
            
            // GET BUSINESS TAX FOR DCR
            dcr = new DCRSummaryTransactions(
                        ObjectHelpers.generateIDandRandString(),
                        DCRSummaryTransactionsDao.getARConsumersRPTCode(activeAccount.getTownCode()),
                        bill.getServicePeriod(),
                        null,
                        bill.getBusinessTax(),
                        ObjectHelpers.getSqlDate(),
                        ObjectHelpers.getSqlTime(),
                        login.getId(),
                        null,
                        null,
                        ObjectHelpers.getCurrentTimestamp(),
                        ObjectHelpers.getCurrentTimestamp(),
                        orNumberField.getText(),
                        "COLLECTION",
                        office,
                        activeAccount.getId());
            DCRSummaryTransactionsDao.insert(connection, dcr);

            // GET BUSINESS TAX FOR SALES
            dcr = new DCRSummaryTransactions(
                        ObjectHelpers.generateIDandRandString(),
                        "140-143-30",
                        bill.getServicePeriod(),
                        null,
                        bill.getBusinessTax(),
                        ObjectHelpers.getSqlDate(),
                        ObjectHelpers.getSqlTime(),
                        login.getId(),
                        null,
                        null,
                        ObjectHelpers.getCurrentTimestamp(),
                        ObjectHelpers.getCurrentTimestamp(),
                        orNumberField.getText(),
                        "SALES",
                        office,
                        activeAccount.getId());
            DCRSummaryTransactionsDao.insert(connection, dcr);
            
            // GET SALES AR BY CONSUMER TYPE 
            if (activeAccount.getOrganizationParentAccount() != null) {
                // BAPA
                dcr = new DCRSummaryTransactions(
                        ObjectHelpers.generateIDandRandString(),
                        "311-448-00",
                        bill.getServicePeriod(),
                        null,
                        DCRSummaryTransactionsDao.getARConsumers(bill) +"",
                        ObjectHelpers.getSqlDate(),
                        ObjectHelpers.getSqlTime(),
                        login.getId(),
                        null,
                        null,
                        ObjectHelpers.getCurrentTimestamp(),
                        ObjectHelpers.getCurrentTimestamp(),
                        nextOrNumber+"",
                        "SALES",
                        office,
                        activeAccount.getId());
                DCRSummaryTransactionsDao.insert(connection, dcr);
            } else {
                if (BillsDao.getAccountType(bill.getConsumerType()).equals("RESIDENTIAL")) {
                    // IF RESIDENTIAL
                    dcr = new DCRSummaryTransactions(
                        ObjectHelpers.generateIDandRandString(),
                        DCRSummaryTransactionsDao.getARConsumersCode(activeAccount.getTownCode()),
                        bill.getServicePeriod(),
                        null,
                        DCRSummaryTransactionsDao.getARConsumers(bill) +"",
                        ObjectHelpers.getSqlDate(),
                        ObjectHelpers.getSqlTime(),
                        login.getId(),
                        null,
                        null,
                        ObjectHelpers.getCurrentTimestamp(),
                        ObjectHelpers.getCurrentTimestamp(),
                        nextOrNumber+"",
                        "SALES",
                        office,
                        activeAccount.getId());
                    DCRSummaryTransactionsDao.insert(connection, dcr);
                } else {
                    // IF NON RESIDENTIALS
                    dcr = new DCRSummaryTransactions(
                        ObjectHelpers.generateIDandRandString(),
                        DCRSummaryTransactionsDao.getGLCodePerAccountType(BillsDao.getAccountType(bill.getConsumerType())),
                        bill.getServicePeriod(),
                        null,
                        DCRSummaryTransactionsDao.getARConsumers(bill) +"",
                        ObjectHelpers.getSqlDate(),
                        ObjectHelpers.getSqlTime(),
                        login.getId(),
                        null,
                        null,
                        ObjectHelpers.getCurrentTimestamp(),
                        ObjectHelpers.getCurrentTimestamp(),
                        nextOrNumber+"",
                        "SALES",
                        office,
                        activeAccount.getId());
                    DCRSummaryTransactionsDao.insert(connection, dcr);
                }
            }
        }
        
        // IF HAS TERMED PAYMENTS COLLECTION
        if (bill.getAdditionalCharges() != null && bill.getAdditionalCharges().length() > 0) {
            DCRSummaryTransactions dcr = new DCRSummaryTransactions(
                ObjectHelpers.generateIDandRandString(),
                DCRSummaryTransactionsDao.getARConsumersTermedPayments(activeAccount.getTownCode()),
                bill.getServicePeriod(),
                null,
                bill.getAdditionalCharges(),
                ObjectHelpers.getSqlDate(),
                ObjectHelpers.getSqlTime(),
                login.getId(),
                null,
                null,
                ObjectHelpers.getCurrentTimestamp(),
                ObjectHelpers.getCurrentTimestamp(),
                nextOrNumber+"",
                "COLLECTION",
                office,
                activeAccount.getId());
            DCRSummaryTransactionsDao.insert(connection, dcr);
        }
        
        // GETC UC-NPC Stranded Debt COLLECTION
        DCRSummaryTransactions dcr = new DCRSummaryTransactions(
            ObjectHelpers.generateIDandRandString(),
            "140-142-87",
            bill.getServicePeriod(),
            null,
            bill.getNPCStrandedDebt(),
            ObjectHelpers.getSqlDate(),
            ObjectHelpers.getSqlTime(),
            login.getId(),
            null,
            null,
            ObjectHelpers.getCurrentTimestamp(),
            ObjectHelpers.getCurrentTimestamp(),
            nextOrNumber+"",
            "COLLECTION",
            office,
            activeAccount.getId());
        DCRSummaryTransactionsDao.insert(connection, dcr);
        
        // GETC UC-NPC Stranded Debt COLLECTION
        dcr = new DCRSummaryTransactions(
            ObjectHelpers.generateIDandRandString(),
            "230-232-65",
            bill.getServicePeriod(),
            null,
            bill.getNPCStrandedDebt(),
            ObjectHelpers.getSqlDate(),
            ObjectHelpers.getSqlTime(),
            login.getId(),
            null,
            null,
            ObjectHelpers.getCurrentTimestamp(),
            ObjectHelpers.getCurrentTimestamp(),
            nextOrNumber+"",
            "SALES",
            office,
            activeAccount.getId());
        DCRSummaryTransactionsDao.insert(connection, dcr);
        
        // GET STRANDED CONTRACT COST COLLECTION
        dcr = new DCRSummaryTransactions(
            ObjectHelpers.generateIDandRandString(),
            "140-142-92",
            bill.getServicePeriod(),
            null,
            bill.getStrandedContractCosts(),
            ObjectHelpers.getSqlDate(),
            ObjectHelpers.getSqlTime(),
            login.getId(),
            null,
            null,
            ObjectHelpers.getCurrentTimestamp(),
            ObjectHelpers.getCurrentTimestamp(),
            nextOrNumber+"",
            "COLLECTION",
            office,
            activeAccount.getId());
        DCRSummaryTransactionsDao.insert(connection, dcr);
        
        // GET STRANDED CONTRACT COST SALES
        dcr = new DCRSummaryTransactions(
            ObjectHelpers.generateIDandRandString(),
            "230-232-62",
            bill.getServicePeriod(),
            null,
            bill.getStrandedContractCosts(),
            ObjectHelpers.getSqlDate(),
            ObjectHelpers.getSqlTime(),
            login.getId(),
            null,
            null,
            ObjectHelpers.getCurrentTimestamp(),
            ObjectHelpers.getCurrentTimestamp(),
            nextOrNumber+"",
            "SALES",
            office,
            activeAccount.getId());
        DCRSummaryTransactionsDao.insert(connection, dcr);
        
        // GET FIT ALL COLLECTION
        dcr = new DCRSummaryTransactions(
            ObjectHelpers.generateIDandRandString(),
            "140-142-88",
            bill.getServicePeriod(),
            null,
            bill.getFeedInTariffAllowance(),
            ObjectHelpers.getSqlDate(),
            ObjectHelpers.getSqlTime(),
            login.getId(),
            null,
            null,
            ObjectHelpers.getCurrentTimestamp(),
            ObjectHelpers.getCurrentTimestamp(),
            nextOrNumber+"",
            "COLLECTION",
            office,
            activeAccount.getId());
        DCRSummaryTransactionsDao.insert(connection, dcr);
        
        // GET FIT ALL SALES
        dcr = new DCRSummaryTransactions(
            ObjectHelpers.generateIDandRandString(),
            "230-232-64",
            bill.getServicePeriod(),
            null,
            bill.getFeedInTariffAllowance(),
            ObjectHelpers.getSqlDate(),
            ObjectHelpers.getSqlTime(),
            login.getId(),
            null,
            null,
            ObjectHelpers.getCurrentTimestamp(),
            ObjectHelpers.getCurrentTimestamp(),
            nextOrNumber+"",
            "SALES",
            office,
            activeAccount.getId());
        DCRSummaryTransactionsDao.insert(connection, dcr);
        
        // GET REDCI COLLECTION
        dcr = new DCRSummaryTransactions(
            ObjectHelpers.generateIDandRandString(),
            "140-142-89",
            bill.getServicePeriod(),
            null,
            bill.getMissionaryElectrificationREDCI(),
            ObjectHelpers.getSqlDate(),
            ObjectHelpers.getSqlTime(),
            login.getId(),
            null,
            null,
            ObjectHelpers.getCurrentTimestamp(),
            ObjectHelpers.getCurrentTimestamp(),
            nextOrNumber+"",
            "COLLECTION",
            office,
            activeAccount.getId());
        DCRSummaryTransactionsDao.insert(connection, dcr);
        
        // GET REDCI SALES
        dcr = new DCRSummaryTransactions(
            ObjectHelpers.generateIDandRandString(),
            "230-232-63",
            bill.getServicePeriod(),
            null,
            bill.getMissionaryElectrificationREDCI(),
            ObjectHelpers.getSqlDate(),
            ObjectHelpers.getSqlTime(),
            login.getId(),
            null,
            null,
            ObjectHelpers.getCurrentTimestamp(),
            ObjectHelpers.getCurrentTimestamp(),
            nextOrNumber+"",
            "SALES",
            office,
            activeAccount.getId());
        DCRSummaryTransactionsDao.insert(connection, dcr);
        
        // GET GENCO COLLECTION
        dcr = new DCRSummaryTransactions(
            ObjectHelpers.generateIDandRandString(),
            "140-142-94",
            bill.getServicePeriod(),
            null,
            bill.getGenerationVAT(),
            ObjectHelpers.getSqlDate(),
            ObjectHelpers.getSqlTime(),
            login.getId(),
            null,
            null,
            ObjectHelpers.getCurrentTimestamp(),
            ObjectHelpers.getCurrentTimestamp(),
            nextOrNumber+"",
            "COLLECTION",
            office,
            activeAccount.getId());
        DCRSummaryTransactionsDao.insert(connection, dcr);
        
        // GET TRANSCO COLLECTION
        dcr = new DCRSummaryTransactions(
            ObjectHelpers.generateIDandRandString(),
            "140-142-95",
            bill.getServicePeriod(),
            null,
            bill.getTransmissionVAT(),
            ObjectHelpers.getSqlDate(),
            ObjectHelpers.getSqlTime(),
            login.getId(),
            null,
            null,
            ObjectHelpers.getCurrentTimestamp(),
            ObjectHelpers.getCurrentTimestamp(),
            nextOrNumber+"",
            "COLLECTION",
            office,
            activeAccount.getId());
        DCRSummaryTransactionsDao.insert(connection, dcr);
        
        // GET SYSLOSS COLLECTION
        dcr = new DCRSummaryTransactions(
            ObjectHelpers.generateIDandRandString(),
            "140-142-96",
            bill.getServicePeriod(),
            null,
            bill.getSystemLossVAT(),
            ObjectHelpers.getSqlDate(),
            ObjectHelpers.getSqlTime(),
            login.getId(),
            null,
            null,
            ObjectHelpers.getCurrentTimestamp(),
            ObjectHelpers.getCurrentTimestamp(),
            nextOrNumber+"",
            "COLLECTION",
            office,
            activeAccount.getId());
        DCRSummaryTransactionsDao.insert(connection, dcr);
        
        // GET DIST VAT COLLECTION
        dcr = new DCRSummaryTransactions(
            ObjectHelpers.generateIDandRandString(),
            "140-142-97",
            bill.getServicePeriod(),
            null,
            bill.getDistributionVAT(),
            ObjectHelpers.getSqlDate(),
            ObjectHelpers.getSqlTime(),
            login.getId(),
            null,
            null,
            ObjectHelpers.getCurrentTimestamp(),
            ObjectHelpers.getCurrentTimestamp(),
            nextOrNumber+"",
            "COLLECTION",
            office,
            activeAccount.getId());
        DCRSummaryTransactionsDao.insert(connection, dcr);
        
        // GET GEN, TRANS, SYS LOSS SALES
        dcr = new DCRSummaryTransactions(
            ObjectHelpers.generateIDandRandString(),
            "170-184-40",
            bill.getServicePeriod(),
            null,
            DCRSummaryTransactionsDao.getGenTransSyslossVatSales(bill) + "",
            ObjectHelpers.getSqlDate(),
            ObjectHelpers.getSqlTime(),
            login.getId(),
            null,
            null,
            ObjectHelpers.getCurrentTimestamp(),
            ObjectHelpers.getCurrentTimestamp(),
            nextOrNumber+"",
            "SALES",
            office,
            activeAccount.getId());
        DCRSummaryTransactionsDao.insert(connection, dcr);
        
        // GET DIST VAT SALES
        dcr = new DCRSummaryTransactions(
            ObjectHelpers.generateIDandRandString(),
            "250-255-00",
            bill.getServicePeriod(),
            null,
            bill.getDistributionVAT(),
            ObjectHelpers.getSqlDate(),
            ObjectHelpers.getSqlTime(),
            login.getId(),
            null,
            null,
            ObjectHelpers.getCurrentTimestamp(),
            ObjectHelpers.getCurrentTimestamp(),
            nextOrNumber+"",
            "SALES",
            office,
            activeAccount.getId());
        DCRSummaryTransactionsDao.insert(connection, dcr);
        
        // GET UCME COLLECTION
        dcr = new DCRSummaryTransactions(
            ObjectHelpers.generateIDandRandString(),
            "140-142-98",
            bill.getServicePeriod(),
            null,
            bill.getMissionaryElectrificationCharge(),
            ObjectHelpers.getSqlDate(),
            ObjectHelpers.getSqlTime(),
            login.getId(),
            null,
            null,
            ObjectHelpers.getCurrentTimestamp(),
            ObjectHelpers.getCurrentTimestamp(),
            nextOrNumber+"",
            "COLLECTION",
            office,
            activeAccount.getId());
        DCRSummaryTransactionsDao.insert(connection, dcr);
        
        // GET UCME SALES
        dcr = new DCRSummaryTransactions(
            ObjectHelpers.generateIDandRandString(),
            "230-232-60",
            bill.getServicePeriod(),
            null,
            bill.getMissionaryElectrificationCharge(),
            ObjectHelpers.getSqlDate(),
            ObjectHelpers.getSqlTime(),
            login.getId(),
            null,
            null,
            ObjectHelpers.getCurrentTimestamp(),
            ObjectHelpers.getCurrentTimestamp(),
            nextOrNumber+"",
            "SALES",
            office,
            activeAccount.getId());
        DCRSummaryTransactionsDao.insert(connection, dcr);
        
        // GET EWT 2% COLLECTION
        dcr = new DCRSummaryTransactions(
            ObjectHelpers.generateIDandRandString(),
            "140-160-00",
            bill.getServicePeriod(),
            null,
            bill.getEvat2Percent() != null ? ("-" + bill.getEvat2Percent()) : "0",
            ObjectHelpers.getSqlDate(),
            ObjectHelpers.getSqlTime(),
            login.getId(),
            null,
            null,
            ObjectHelpers.getCurrentTimestamp(),
            ObjectHelpers.getCurrentTimestamp(),
            nextOrNumber+"",
            "COLLECTION",
            office,
            activeAccount.getId());
        DCRSummaryTransactionsDao.insert(connection, dcr);
        
        // GET EWT 5% COLLECTION
        dcr = new DCRSummaryTransactions(
            ObjectHelpers.generateIDandRandString(),
            "140-170-00",
            bill.getServicePeriod(),
            null,
            bill.getEvat5Percent() != null ? ("-" + bill.getEvat5Percent()) : "0",
            ObjectHelpers.getSqlDate(),
            ObjectHelpers.getSqlTime(),
            login.getId(),
            null,
            null,
            ObjectHelpers.getCurrentTimestamp(),
            ObjectHelpers.getCurrentTimestamp(),
            nextOrNumber+"",
            "COLLECTION",
            office,
            activeAccount.getId());
        DCRSummaryTransactionsDao.insert(connection, dcr);
        
        // GET ENVIRONMENTAL COLLECTION
        dcr = new DCRSummaryTransactions(
            ObjectHelpers.generateIDandRandString(),
            "140-142-99",
            bill.getServicePeriod(),
            null,
            bill.getEnvironmentalCharge(),
            ObjectHelpers.getSqlDate(),
            ObjectHelpers.getSqlTime(),
            login.getId(),
            null,
            null,
            ObjectHelpers.getCurrentTimestamp(),
            ObjectHelpers.getCurrentTimestamp(),
            nextOrNumber+"",
            "COLLECTION",
            office,
            activeAccount.getId());
        DCRSummaryTransactionsDao.insert(connection, dcr);
        
        // GET ENVIRONMENTAL SALES
        dcr = new DCRSummaryTransactions(
            ObjectHelpers.generateIDandRandString(),
            "230-232-90",
            bill.getServicePeriod(),
            null,
            bill.getEnvironmentalCharge(),
            ObjectHelpers.getSqlDate(),
            ObjectHelpers.getSqlTime(),
            login.getId(),
            null,
            null,
            ObjectHelpers.getCurrentTimestamp(),
            ObjectHelpers.getCurrentTimestamp(),
            nextOrNumber+"",
            "SALES",
            office,
            activeAccount.getId());
        DCRSummaryTransactionsDao.insert(connection, dcr);
        
        // GET RFSC COLLECTION
        dcr = new DCRSummaryTransactions(
            ObjectHelpers.generateIDandRandString(),
            "140-142-93",
            bill.getServicePeriod(),
            null,
            bill.getRFSC(),
            ObjectHelpers.getSqlDate(),
            ObjectHelpers.getSqlTime(),
            login.getId(),
            null,
            null,
            ObjectHelpers.getCurrentTimestamp(),
            ObjectHelpers.getCurrentTimestamp(),
            nextOrNumber+"",
            "COLLECTION",
            office,
            activeAccount.getId());
        DCRSummaryTransactionsDao.insert(connection, dcr);
        
        // GET RFSC SALES
        dcr = new DCRSummaryTransactions(
            ObjectHelpers.generateIDandRandString(),
            "211-211-10",
            bill.getServicePeriod(),
            null,
            bill.getRFSC(),
            ObjectHelpers.getSqlDate(),
            ObjectHelpers.getSqlTime(),
            login.getId(),
            null,
            null,
            ObjectHelpers.getCurrentTimestamp(),
            ObjectHelpers.getCurrentTimestamp(),
            nextOrNumber+"",
            "SALES",
            office,
            activeAccount.getId());
        DCRSummaryTransactionsDao.insert(connection, dcr);
    }
    
    public void print(String dcrNum) {
        try {
            List<PaidBills> paidBills = PaidBillsDao.getPaidBillsByDcrNum(connection, dcrNum);
            int pbSize = paidBills.size();
            for (int i=0; i<pbSize; i++) {
                PaidBills pb = paidBills.get(i);
                Bills bill = BillsDao.getOneByAccountAndPeriod(connection, pb.getAccountNumber(), pb.getServicePeriod());
                pb.setBank(bill.getDueDate());
                ServiceAccounts account = ServiceAccountsDao.getOneById(connection, pb.getAccountNumber());
                List<PaidBills> billsList = new ArrayList<>();
                billsList.add(pb);
                
                PrinterJob job = PrinterJob.getPrinterJob();
                PageFormat pf = job.defaultPage();
                Paper paper = pf.getPaper();
                double width = 5d * 72d;
                double height = 4d * 72d;
                double margin = 0.1d * 72d;
                paper.setSize(width, height);
                paper.setImageableArea(
                        margin,
                        margin,
                        width - (margin * 2),
                        height - (margin * 2));
                pf.setPaper(paper);
                Book pBook = new Book();
                pBook.append(new PowerBillPrint(billsList, account, pb.getORNumber(), login.getUsername()), pf);
                job.setPageable(pBook);

        //            job.setPrintable(new PowerBillPrint(bills.get(i), account));
                try {
                    job.print();
                } catch (PrinterException e) {
                    e.printStackTrace();
                    Notifiers.showErrorMessage("Error Printing Payment", "Account No: " + account.getOldAccountNo() + "\n" + e.getMessage());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error Printing Transaction", e.getMessage());
        }
    }
    
    public void fixDCR(String userId, String accountNumber, String orNumber, String day, PaidBills paidBill, ServiceAccounts activeAccount, String period) {
        try {
            double netAmount = paidBill.getNetAmount() != null ? Double.valueOf(paidBill.getNetAmount()) : 0;
            double dcrAmount = ObjectHelpers.roundTwoNoCommaDouble(DCRSummaryTransactionsDao.getDcr(connection, orNumber, userId, accountNumber, day, period));
            
            double diff = netAmount - dcrAmount;
            
            if (diff == 0) {
                
            } else {
                DCRSummaryTransactions dcr = new DCRSummaryTransactions(
                ObjectHelpers.generateIDandRandString(),
                DCRSummaryTransactionsDao.getARConsumersCode(activeAccount.getTownCode()),
                paidBill.getServicePeriod(),
                null,
                ObjectHelpers.roundFourNoComma(diff) + "",
                ObjectHelpers.getSqlDate(),
                ObjectHelpers.getSqlTime(),
                userId,
                null,
                "FIX",
                ObjectHelpers.getCurrentTimestamp(),
                ObjectHelpers.getCurrentTimestamp(),
                orNumber,
                "COLLECTION",
                office,
                accountNumber);
                DCRSummaryTransactionsDao.insert(connection, dcr);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
