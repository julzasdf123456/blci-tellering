/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.lopez.julz;

import helpers.Notifiers;
import helpers.ObjectHelpers;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import pojos.BillMirror;
import pojos.Bills;
import sun.swing.table.DefaultTableCellHeaderRenderer;

/**
 *
 * @author julza
 */
public class PreviewPartialDistribution extends javax.swing.JPanel {

    public Bills originalBill;
    public BillMirror partialBill;
    public DefaultTableModel model;
    
    public String columns[] = { "Charges", "Bill Amount", "Partial Payment", "Balances"};
    public String charges[] = {
        "Generation System",
        "GRAM/ICERA/ACRM",
        "Transmission Delivery Charge",
        "System Loss Charge",
        "Distribution Demand Charge",
        "Distribution System Charge",
        "Supply Retail Customer Charge",
        "Metering Retail Customer Charge",
        "Metering System Charge",
        "Lifeline Rate (Discount/Subsidy)",
        "Inter-Class Cross Subsidy Charge",
        "Power Act Reduction",
        "Senior Citizen Subsidy",
        "Environmental Charge",
        "Stranded Contract Costs",
        "NPC Stranded Debt",
        "Feed-in Tariff Allowance (FIT-All)",
        "Missionary Electrification - RED",
        "Missionary Electrification - SPUG",
        "Missionary Electrification - SPUG TRUE UP",
        "Generation VAT",
        "GRAM/ICERA/ACRM VAT",
        "Transmission VAT",
        "System Loss VAT",
        "Distribution VAT",
        "Others VAT",
        "Franchise Tax",
        "Franchise Tax (Others)",
        "Business Tax",
        "Real Property Tax (RPT)",
        "Termed Payments",
        "Customer Deposit",
        "Material Deposit",
        "2307 (5%)",
        "2307 (2%)",
    };
    /**
     * Creates new form PreviewPartialDistribution
     */
    public PreviewPartialDistribution(Bills originalBill, BillMirror partialBill) {
        initComponents();
        this.originalBill = originalBill;
        this.partialBill = partialBill;
        
        setContents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        distributionTable = new javax.swing.JTable();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Partial Payment Charges Distribution Comparison");

        distributionTable.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        distributionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        distributionTable.setRowHeight(26);
        jScrollPane3.setViewportView(distributionTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1093, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 711, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable distributionTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables

    public void setContents() {
        try {
            int size = charges.length;
            model = new DefaultTableModel(columns, size) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
            
            for (int i=0; i<size; i++) {
                model.setValueAt(charges[i], i, 0);
            }
            
            addBillsContent();
            
            DefaultTableCellRenderer rightRendererRed = new DefaultTableCellRenderer();
            rightRendererRed.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererRed.setForeground(Color.WHITE);
            rightRendererRed.setBackground(Color.decode("#e35239"));
            rightRendererRed.setFont(new Font("Arial", Font.BOLD, 15));
            
            DefaultTableCellRenderer rightRendererBlue = new DefaultTableCellRenderer();
            rightRendererBlue.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererBlue.setForeground(Color.WHITE);
            rightRendererBlue.setBackground(Color.decode("#357ac4"));
            rightRendererBlue.setFont(new Font("Arial", Font.BOLD, 15));
            
            DefaultTableCellRenderer rightRendererGreen = new DefaultTableCellRenderer();
            rightRendererGreen.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererGreen.setForeground(Color.WHITE);
            rightRendererGreen.setBackground(Color.decode("#19b37f"));
            rightRendererGreen.setFont(new Font("Arial", Font.BOLD, 15));
            
            distributionTable.setModel(model);
            distributionTable.getColumnModel().getColumn(0).setPreferredWidth(100);
//            distributionTable.getColumnModel().getColumn(1).setCellRenderer(rightRendererGreen);
//            distributionTable.getColumnModel().getColumn(2).setCellRenderer(rightRendererBlue);
//            distributionTable.getColumnModel().getColumn(3).setCellRenderer(rightRendererRed);

            distributionTable.setDefaultRenderer(Object.class, new DefaultTableCellHeaderRenderer(){
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {                    
                    if (column == 1) {
                        setFont(new Font("Arial", Font.BOLD, 14));
                        setBackground(Color.decode("#19b37f"));
                        setForeground(Color.WHITE);
                    } else if (column == 2) {
                        setBackground(Color.decode("#357ac4"));
                        setForeground(Color.WHITE);
                    } else if (column == 3) {
                        setBackground(Color.decode("#e35239"));
                        setForeground(Color.WHITE);
                    } else if (column == 0) {
                        setForeground(Color.BLACK);
                        setBackground(Color.WHITE);
                        setAlignmentX(LEADING);
                        setPreferredSize(new Dimension(100, 26));
                    }
                    
                    setValue(value);
                    return this;
                }
            });
            
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Oops!", "Error populating content.\n" + e.getMessage());
        }
    }
    
    public void addBillsContent() {
        try {
            model.setValueAt(originalBill.getGenerationSystemCharge(), 0, 1);
            model.setValueAt(originalBill.getACRM(), 1, 1);
            model.setValueAt(originalBill.getTransmissionDeliveryChargeKWH(), 2, 1);
            model.setValueAt(originalBill.getSystemLossCharge(), 3, 1);
            model.setValueAt(originalBill.getDistributionDemandCharge(), 4, 1);
            model.setValueAt(originalBill.getDistributionSystemCharge(), 5, 1);
            model.setValueAt(originalBill.getSupplyRetailCustomerCharge(), 6, 1);
            model.setValueAt(originalBill.getMeteringRetailCustomerCharge(), 7, 1);
            model.setValueAt(originalBill.getMeteringSystemCharge(), 8, 1);
            model.setValueAt(originalBill.getLifelineRate(), 9, 1);
            model.setValueAt(originalBill.getInterClassCrossSubsidyCharge(), 10, 1);
            model.setValueAt(originalBill.getPowerActReduction(), 11, 1);
            model.setValueAt(originalBill.getSeniorCitizenSubsidy(), 12, 1);
            model.setValueAt(originalBill.getEnvironmentalCharge(), 13, 1);
            model.setValueAt(originalBill.getStrandedContractCosts(), 14, 1);
            model.setValueAt(originalBill.getNPCStrandedDebt(), 15, 1);
            model.setValueAt(originalBill.getFeedInTariffAllowance(), 16, 1);
            model.setValueAt(originalBill.getMissionaryElectrificationREDCI(), 17, 1);
            model.setValueAt(originalBill.getMissionaryElectrificationSPUG(), 18, 1);
            model.setValueAt(originalBill.getMissionaryElectrificationSPUGTRUEUP(), 19, 1);
            model.setValueAt(originalBill.getGenerationVAT(), 20, 1);
            model.setValueAt(originalBill.getACRMVAT(), 21, 1);
            model.setValueAt(originalBill.getTransmissionVAT(), 22, 1);
            model.setValueAt(originalBill.getSystemLossVAT(), 23, 1);
            model.setValueAt(originalBill.getDistributionVAT(), 24, 1);
            model.setValueAt(originalBill.getOthersVAT(), 25, 1);
            model.setValueAt(originalBill.getFranchiseTax(), 26, 1);
            model.setValueAt(originalBill.getFranchiseTaxOthers(), 27, 1);
            model.setValueAt(originalBill.getBusinessTax(), 28, 1);
            model.setValueAt(originalBill.getRealPropertyTax(), 29, 1);
            model.setValueAt(originalBill.getTermedPayments(), 30, 1);
            model.setValueAt(originalBill.getCustomerDeposit(), 31, 1);
            model.setValueAt(originalBill.getAdvancedMaterialDeposit(), 32, 1);
            model.setValueAt(originalBill.getEvat5Percent(), 33, 1);
            model.setValueAt(originalBill.getEvat2Percent(), 34, 1);
            
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getGenerationSystemCharge())), 0, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getACRM())), 1, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getTransmissionDeliveryChargeKWH())), 2, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getSystemLossCharge())), 3, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getDistributionDemandCharge())), 4, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getDistributionSystemCharge())), 5, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getSupplyRetailCustomerCharge())), 6, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getMeteringRetailCustomerCharge())), 7, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getMeteringSystemCharge())), 8, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getLifelineRate())), 9, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getInterClassCrossSubsidyCharge())), 10, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getPowerActReduction())), 11, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getSeniorCitizenSubsidy())), 12, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getEnvironmentalCharge())), 13, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getStrandedContractCosts())), 14, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getNPCStrandedDebt())), 15, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getFeedInTariffAllowance())), 16, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getMissionaryElectrificationREDCI())), 17, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getMissionaryElectrificationSPUG())), 18, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getMissionaryElectrificationSPUGTRUEUP())), 19, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getGenerationVAT())), 20, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getACRMVAT())), 21, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getTransmissionVAT())), 22, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getSystemLossVAT())), 23, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getDistributionVAT())), 24, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getOthersVAT())), 25, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getFranchiseTax())), 26, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getFranchiseTaxOthers())), 27, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getBusinessTax())), 28, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getRealPropertyTax())), 29, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getTermedPayments())), 30, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getCustomerDeposit())), 31, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getAdvancedMaterialDeposit())), 32, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getEvat5Percent())), 33, 2);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.doubleStringNull(partialBill.getEvat2Percent())), 34, 2);
            
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(0,1) - getModelValue(0,2)))), 0, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(1,1) - getModelValue(1,2)))), 1, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(2,1) - getModelValue(2,2)))), 2, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(3,1) - getModelValue(3,2)))), 3, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(4,1) - getModelValue(4,2)))), 4, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(5,1) - getModelValue(5,2)))), 5, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(6,1) - getModelValue(6,2)))), 6, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(7,1) - getModelValue(7,2)))), 7, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(8,1) - getModelValue(8,2)))), 8, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(9,1) - getModelValue(9,2)))), 9, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(10,1) - getModelValue(10,2)))), 10, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(11,1) - getModelValue(11,2)))), 11, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(12,1) - getModelValue(12,2)))), 12, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(13,1) - getModelValue(13,2)))), 13, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(14,1) - getModelValue(14,2)))), 14, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(15,1) - getModelValue(15,2)))), 15, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(16,1) - getModelValue(16,2)))), 16, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(17,1) - getModelValue(17,2)))), 17, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(18,1) - getModelValue(18,2)))), 18, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(19,1) - getModelValue(19,2)))), 19, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(20,1) - getModelValue(20,2)))), 20, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(21,1) - getModelValue(21,2)))), 21, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(22,1) - getModelValue(22,2)))), 22, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(23,1) - getModelValue(23,2)))), 23, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(24,1) - getModelValue(24,2)))), 24, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(25,1) - getModelValue(25,2)))), 25, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(26,1) - getModelValue(26,2)))), 26, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(27,1) - getModelValue(27,2)))), 27, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(28,1) - getModelValue(28,2)))), 28, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(29,1) - getModelValue(29,2)))), 29, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(30,1) - getModelValue(30,2)))), 30, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(31,1) - getModelValue(31,2)))), 31, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(32,1) - getModelValue(32,2)))), 32, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(33,1) - getModelValue(33,2)))), 33, 3);
            model.setValueAt(ObjectHelpers.tableValueValidator(ObjectHelpers.roundTwoNoCommaDouble((getModelValue(34,1) - getModelValue(34,2)))), 34, 3);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public double getModelValue(int row, int column) {
        try {
            if (model.getValueAt(row, column) != null) {
                return ObjectHelpers.doubleStringNull(model.getValueAt(row, column).toString());
            } else {
                return 0;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }
}
